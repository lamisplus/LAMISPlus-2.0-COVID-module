[{"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\index.js":"1","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\App.js":"2","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\reportWebVitals.js":"3","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\context\\ThemeContext.js":"4","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\context\\ThemeDemo.js":"5","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Dashboard\\Home.js":"6","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\layouts\\PageTitle.js":"7","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Home.js":"8","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientList.js":"9","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Vaccination\\VaccinationList.js":"10","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Vaccination\\AddViccination.js":"11","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\api.js":"12","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\RegisterPatient.js":"13","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\EditPatient.js":"14","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientDetail.js":"15","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientCard.js":"16","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\AddmissionHome.js":"17","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\InclusionCriteria.js":"18","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Demograhic.js":"19","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Vaccination.js":"20","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Comorbitie.js":"21","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\ReInfection.js":"22","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\VitalSign.js":"23","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\Index.js":"24","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\Height.js":"25","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\Bmi.js":"26","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\ViccinationStatus.js":"27","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\AdmissionList.js":"28","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\SignsSymptons.js":"29","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\ChronicMedication.js":"30","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Medication.js":"31","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\SupportiveCare.js":"32","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Transfer\\Transfer.js":"33","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\ICU\\ICUList.js":"34","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\DischargeDead\\DischargeDeathList.js":"35","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\DeletePatient.js":"36","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\index.js":"37","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\App.js":"38","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\reportWebVitals.js":"39","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\context\\ThemeContext.js":"40","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\context\\ThemeDemo.js":"41","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Home.js":"42","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\EditPatient.js":"43","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\RegisterPatient.js":"44","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientDetail.js":"45","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientList.js":"46","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\api.js":"47","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientCard.js":"48","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\AdmissionList.js":"49","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\AddmissionHome.js":"50","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\ICU\\ICUList.js":"51","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\DischargeDead\\DischargeDeathList.js":"52","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationList.js":"53","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Index.js":"54","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\DeletePatient.js":"55","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Transfer\\Transfer.js":"56","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\ViccinationStatus.js":"57","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Bmi.js":"58","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Height.js":"59","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Vaccination\\AddViccination.js":"60","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\layouts\\PageTitle.js":"61","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\SupportiveCare.js":"62","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\ChronicMedication.js":"63","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\SignsSymptons.js":"64","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Comorbitie.js":"65","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Vaccination.js":"66","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Medication.js":"67","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\ReInfection.js":"68","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\VitalSign.js":"69","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Demograhic.js":"70","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\InclusionCriteria.js":"71","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationHistory.js":"72"},{"size":719,"mtime":1649678216240,"results":"73","hashOfConfig":"74"},{"size":1239,"mtime":1649677422295,"results":"75","hashOfConfig":"74"},{"size":375,"mtime":1645443895194,"results":"76","hashOfConfig":"74"},{"size":9235,"mtime":1645443895416,"results":"77","hashOfConfig":"74"},{"size":3056,"mtime":1645443895540,"results":"78","hashOfConfig":"74"},{"size":59195,"mtime":1649473601588,"results":"79","hashOfConfig":"74"},{"size":543,"mtime":1645444442432,"results":"80","hashOfConfig":"74"},{"size":1939,"mtime":1649677774964,"results":"81","hashOfConfig":"74"},{"size":14819,"mtime":1649677110130,"results":"82","hashOfConfig":"74"},{"size":14065,"mtime":1649676178136,"results":"83","hashOfConfig":"74"},{"size":11013,"mtime":1649676083120,"results":"84","hashOfConfig":"74"},{"size":416,"mtime":1649654666100,"results":"85","hashOfConfig":"74"},{"size":12022,"mtime":1649612260335,"results":"86","hashOfConfig":"74"},{"size":12295,"mtime":1649561546107,"results":"87","hashOfConfig":"74"},{"size":3496,"mtime":1649612215366,"results":"88","hashOfConfig":"74"},{"size":9145,"mtime":1649674535152,"results":"89","hashOfConfig":"74"},{"size":11316,"mtime":1649617315614,"results":"90","hashOfConfig":"74"},{"size":11225,"mtime":1649613987053,"results":"91","hashOfConfig":"74"},{"size":11182,"mtime":1649614032879,"results":"92","hashOfConfig":"74"},{"size":11208,"mtime":1649614099373,"results":"93","hashOfConfig":"74"},{"size":11186,"mtime":1649614021206,"results":"94","hashOfConfig":"74"},{"size":11182,"mtime":1649614060172,"results":"95","hashOfConfig":"74"},{"size":11195,"mtime":1649614110308,"results":"96","hashOfConfig":"74"},{"size":2793,"mtime":1649594846347,"results":"97","hashOfConfig":"74"},{"size":1132,"mtime":1649591401836,"results":"98","hashOfConfig":"74"},{"size":1132,"mtime":1649591397927,"results":"99","hashOfConfig":"74"},{"size":1513,"mtime":1649591508300,"results":"100","hashOfConfig":"74"},{"size":13982,"mtime":1649676237012,"results":"101","hashOfConfig":"74"},{"size":11207,"mtime":1649614073244,"results":"102","hashOfConfig":"74"},{"size":11215,"mtime":1649614008067,"results":"103","hashOfConfig":"74"},{"size":11173,"mtime":1649614049355,"results":"104","hashOfConfig":"74"},{"size":11192,"mtime":1649614088415,"results":"105","hashOfConfig":"74"},{"size":6962,"mtime":1649676065848,"results":"106","hashOfConfig":"74"},{"size":13981,"mtime":1649675922984,"results":"107","hashOfConfig":"74"},{"size":14020,"mtime":1649676199170,"results":"108","hashOfConfig":"74"},{"size":5673,"mtime":1649677018314,"results":"109","hashOfConfig":"74"},{"size":701,"mtime":1649690938568,"results":"110","hashOfConfig":"111"},{"size":1239,"mtime":1649677422295,"results":"112","hashOfConfig":"111"},{"size":375,"mtime":1645443895194,"results":"113","hashOfConfig":"111"},{"size":9235,"mtime":1645443895416,"results":"114","hashOfConfig":"111"},{"size":3056,"mtime":1645443895540,"results":"115","hashOfConfig":"111"},{"size":1939,"mtime":1649677774964,"results":"116","hashOfConfig":"111"},{"size":12295,"mtime":1649561546107,"results":"117","hashOfConfig":"111"},{"size":12022,"mtime":1649612260335,"results":"118","hashOfConfig":"111"},{"size":3613,"mtime":1649739046137,"results":"119","hashOfConfig":"111"},{"size":14819,"mtime":1649677110130,"results":"120","hashOfConfig":"111"},{"size":416,"mtime":1649743910705,"results":"121","hashOfConfig":"111"},{"size":9183,"mtime":1649741673263,"results":"122","hashOfConfig":"111"},{"size":13982,"mtime":1649676237012,"results":"123","hashOfConfig":"111"},{"size":23439,"mtime":1649691813279,"results":"124","hashOfConfig":"111"},{"size":13981,"mtime":1649675922984,"results":"125","hashOfConfig":"111"},{"size":14020,"mtime":1649676199170,"results":"126","hashOfConfig":"111"},{"size":14065,"mtime":1649676178136,"results":"127","hashOfConfig":"111"},{"size":2793,"mtime":1649594846347,"results":"128","hashOfConfig":"111"},{"size":5673,"mtime":1649677018314,"results":"129","hashOfConfig":"111"},{"size":6962,"mtime":1649676065848,"results":"130","hashOfConfig":"111"},{"size":1513,"mtime":1649591508300,"results":"131","hashOfConfig":"111"},{"size":1132,"mtime":1649591397927,"results":"132","hashOfConfig":"111"},{"size":1132,"mtime":1649591401836,"results":"133","hashOfConfig":"111"},{"size":13615,"mtime":1649744636222,"results":"134","hashOfConfig":"111"},{"size":543,"mtime":1645444442432,"results":"135","hashOfConfig":"111"},{"size":12362,"mtime":1649744812622,"results":"136","hashOfConfig":"111"},{"size":12388,"mtime":1649744733741,"results":"137","hashOfConfig":"111"},{"size":12376,"mtime":1649744803692,"results":"138","hashOfConfig":"111"},{"size":12336,"mtime":1649744754463,"results":"139","hashOfConfig":"111"},{"size":11245,"mtime":1649687101637,"results":"140","hashOfConfig":"111"},{"size":12339,"mtime":1649744790463,"results":"141","hashOfConfig":"111"},{"size":12334,"mtime":1649744797347,"results":"142","hashOfConfig":"111"},{"size":11239,"mtime":1649687073305,"results":"143","hashOfConfig":"111"},{"size":12349,"mtime":1649744762489,"results":"144","hashOfConfig":"111"},{"size":12378,"mtime":1649744772456,"results":"145","hashOfConfig":"111"},{"size":11581,"mtime":1649688452177,"results":"146","hashOfConfig":"111"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},"111cg71",{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"153"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"170","usedDeprecatedRules":"153"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"173","usedDeprecatedRules":"153"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"176","usedDeprecatedRules":"153"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"181","usedDeprecatedRules":"153"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"184","usedDeprecatedRules":"153"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"153"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"192","usedDeprecatedRules":"153"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"195","usedDeprecatedRules":"153"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"198","usedDeprecatedRules":"153"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"201","usedDeprecatedRules":"153"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"204","usedDeprecatedRules":"153"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"207","usedDeprecatedRules":"153"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"210","usedDeprecatedRules":"153"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"153"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"222","usedDeprecatedRules":"153"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"225","usedDeprecatedRules":"153"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"228","usedDeprecatedRules":"153"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"231","usedDeprecatedRules":"153"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"234","usedDeprecatedRules":"153"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"237","usedDeprecatedRules":"153"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"240","usedDeprecatedRules":"153"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"243","usedDeprecatedRules":"153"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"246","usedDeprecatedRules":"153"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"250"},"1kc5t3w",{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"250"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"250"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"184","usedDeprecatedRules":"250"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"181","usedDeprecatedRules":"250"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"170","usedDeprecatedRules":"250"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"222","usedDeprecatedRules":"250"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"277","usedDeprecatedRules":"250"},{"filePath":"278","messages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"240","usedDeprecatedRules":"250"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"243","usedDeprecatedRules":"250"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"173","usedDeprecatedRules":"250"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"250"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"246","usedDeprecatedRules":"250"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"237","usedDeprecatedRules":"250"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"250"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"310","usedDeprecatedRules":"250"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"317","usedDeprecatedRules":"250"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":5,"source":"324","usedDeprecatedRules":"250"},"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\index.js",["325"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./context/ThemeContext\"; \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <BrowserRouter basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </BrowserRouter>    \r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\App.js",["326"],"import React from \"react\";\r\nimport {\r\n  MemoryRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nimport { ToastContainer} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\r\nimport \"./css/style.css\";\r\n\r\nimport RegisterPatient from './jsx/components/Patient/RegisterPatient'\r\nimport Home from './jsx/components/Home'\r\nimport EditPatient from './jsx/components/Patient/EditPatient'\r\nimport PatientDetail from './jsx/components/Patient/PatientDetail'\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n\r\n      <div>\r\n      <ToastContainer />\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <Switch>\r\n         \r\n          <Route path=\"/register-patient\">\r\n            <RegisterPatient />\r\n          </Route>\r\n          <Route path=\"/patient-dashboard\">\r\n            <PatientDetail />\r\n          </Route>\r\n          <Route path=\"/edit-patient\">\r\n            <EditPatient />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        \r\n          \r\n        </Switch>\r\n      </div>\r\n \r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n",["327","328"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\reportWebVitals.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\context\\ThemeContext.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\context\\ThemeDemo.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Dashboard\\Home.js",[],["329","330"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\layouts\\PageTitle.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Home.js",["331"],"import React, {useState, Fragment } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\r\nimport Dashboard from './Patient/PatientList'\r\nimport AdmissionList from './Admission/AdmissionList'\r\nimport ICUList from './ICU/ICUList'\r\nimport DischargeDeathList from './DischargeDead/DischargeDeathList'\r\nimport VaccinationList from './Vaccination/VaccinationList'\r\n\r\nconst divStyle = {\r\n  borderRadius: \"2px\",\r\n  fontSize: 14,\r\n};\r\n\r\nconst Home = () => {\r\n    const [key, setKey] = useState('home');\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n     \r\n      <Row>\r\n       \r\n        <Col xl={12}>\r\n          <Card style={divStyle}>\r\n            \r\n            <Card.Body>\r\n              {/* <!-- Nav tabs --> */}\r\n              <div className=\"custom-tab-1\">\r\n                <Tabs\r\n                    id=\"controlled-tab-example\"\r\n                    activeKey={key}\r\n                    onSelect={(k) => setKey(k)}\r\n                    className=\"mb-3\"\r\n                    >\r\n                    <Tab eventKey=\"home\" title=\"Patients\">                   \r\n                      <Dashboard />\r\n                    </Tab>\r\n                    <Tab eventKey=\"vaccination\" title=\"Vaccination\">                   \r\n                      <VaccinationList />\r\n                    </Tab>\r\n                    <Tab eventKey=\"Admission\" title=\"Admission\">\r\n                      <AdmissionList />\r\n                    </Tab>\r\n                    <Tab eventKey=\"ICU\" title=\"ICU\">\r\n                      <ICUList />\r\n                    </Tab>\r\n                    <Tab eventKey=\"Discharge/Death\" title=\"Discharge/Death\">\r\n                      <DischargeDeathList />\r\n                    </Tab>\r\n                    </Tabs>\r\n\r\n\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientList.js",["332","333","334","335","336","337","338"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport {FaSyringe, FaUserEdit, FaShare, FaTrash} from \"react-icons/fa\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Vaccination from './../Vaccination/AddViccination'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer';\r\nimport DeletePatient from './../Patient/DeletePatient';\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst Patients = (props) => {\r\n    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [patientObj, setpatientObj] = useState([])\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const Deletetoggle = () => setDeleteModal(!deleteModal);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    console.log(response.data)\r\n                    setPatientList(response.data);\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n\r\n    const loadVaccinationModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setModal(!modal)\r\n    }\r\n    const loadTransferModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setTransferModal(!transferModal)\r\n    }\r\n    const DeletePatientModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n        setDeleteModal(!deleteModal)\r\n    }\r\n    \r\n    const VaccinationStatusIcon = (patient)=>{\r\n        //patient.first_name + \" \"  + patient. last_name,\r\n        if(patient.vaccination_status===\"\"){\r\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else {\r\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }\r\n    }\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n       <Card>\r\n         <CardBody>\r\n\r\n         <Link to={\"register-patient\"} >\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<FaUserPlus size=\"10\"/>}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n            </Button>\r\n            </Link>        \r\n        <br/><br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Find Patient \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Patient Name\",\r\n                  field: \"name\",\r\n                },\r\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                { title: \"Address\", field: \"address\", filtering: false },\r\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\r\n                { title: \"DOB\", field: \"dob\", filtering: false },\r\n                { title: \"Age\", field: \"age\", filtering: false },\r\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              data={ patientList.map((row) => ({\r\n                  //Id: manager.id,\r\n                    name: VaccinationStatusIcon(row),\r\n                    hospital_number: row.participant_id,\r\n                    address: row.address,\r\n                    phone_number:  row.phone,\r\n                    dob:row.dob,\r\n                    age: (row.dob === 0 ||\r\n                        row.dob === undefined ||\r\n                        row.dob === null ||\r\n                        row.dob === \"\" )\r\n                          ? 0\r\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n                    v_status:  VaccinationStatus(row),\r\n                    status: CurrentStatus(row.current_status) \r\n                            ,\r\n                    actions:\r\n            \r\n                    <div>\r\n                    <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\r\n                          Actions <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{ color:\"#000000 !important\"}} >\r\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \r\n                                    <Link\r\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\r\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\r\n                                  </Link>                               \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\r\n                                        <Link\r\n                                            to={{\r\n                                              pathname: \"/edit-patient\",\r\n                                              state: { patientObj: row  }\r\n                                            }}>\r\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \r\n                                      </Link>\r\n                                  </MenuItem>                                      \r\n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\r\n                                     \r\n                                        <FaShare size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Transfer</span>\r\n                                                                    \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\r\n                                     \r\n                                        <FaSyringe size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Vaccination</span>\r\n                                                                   \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => DeletePatientModal(row)}>\r\n                                     \r\n                                        <FaTrash size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Delete</span>\r\n                                                                   \r\n                                  </MenuItem>\r\n                                  \r\n                          </MenuList>\r\n                    </Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              //backgroundColor: \"#9F9FA5\",\r\n                              color: \"#000\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n    \r\n        </CardBody>\r\n       </Card>\r\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\r\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\r\n      <DeletePatient  toggle={Deletetoggle} showModal={deleteModal} patientObj={patientObj} loadPatients={patients}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Vaccination\\VaccinationList.js",["339","340","341","342","343","344","345"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Vaccination from './../Vaccination/AddViccination'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer'\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst Patients = (props) => {\r\n    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [patientObj, setpatientObj] = useState([])\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data)\r\n                    setPatientList(response.data.filter((x)=> x.vaccination_status!==null));\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n\r\n    const loadVaccinationModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setModal(!modal)\r\n    }\r\n    const loadTransferModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setTransferModal(!transferModal)\r\n    }\r\n    const VaccinationStatusIcon = (patient)=>{\r\n        //patient.first_name + \" \"  + patient. last_name,\r\n        if(patient.vaccination_status===\"\"){\r\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else {\r\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }\r\n    }\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\r\n        }\r\n\r\n    }\r\n\r\n    console.log(patientList.filter((x)=> x.vaccination_status!==null))\r\n  return (\r\n    <div>\r\n       <Card>\r\n         <CardBody>\r\n\r\n         <Link to={\"register-patient\"} >\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<FaUserPlus size=\"10\"/>}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n            </Button>\r\n            </Link>        \r\n        <br/><br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Find Vaccinated Patient \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Patient Name\",\r\n                  field: \"name\",\r\n                },\r\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                { title: \"Address\", field: \"address\", filtering: false },\r\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\r\n                { title: \"DOB\", field: \"dob\", filtering: false },\r\n                { title: \"Age\", field: \"age\", filtering: false },\r\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              data={ patientList.map((row) => ({\r\n                  //Id: manager.id,\r\n                    name: VaccinationStatusIcon(row),\r\n                    hospital_number: row.participant_id,\r\n                    address: row.address,\r\n                    phone_number:  row.phone,\r\n                    dob:row.dob,\r\n                    age: (row.dob === 0 ||\r\n                        row.dob === undefined ||\r\n                        row.dob === null ||\r\n                        row.dob === \"\" )\r\n                          ? 0\r\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n                    v_status:  VaccinationStatus(row),\r\n                    status: CurrentStatus(row.current_status) \r\n                            ,\r\n                    actions:\r\n            \r\n                    <div>\r\n                    <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\r\n                          Actions <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{ color:\"#000000 !important\"}} >\r\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \r\n                                    <Link\r\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\r\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\r\n                                  </Link>                               \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\r\n                                        <Link\r\n                                            to={{\r\n                                              pathname: \"/edit-patient\",\r\n                                              state: { patientObj: row  }\r\n                                            }}>\r\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \r\n                                      </Link>\r\n                                  </MenuItem>                                      \r\n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\r\n                                     \r\n                                        <FaShare size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Transfer</span>\r\n                                                                    \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\r\n                                     \r\n                                        <FaSyringe size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Vaccination</span>\r\n                                                                   \r\n                                  </MenuItem>\r\n                                  \r\n                          </MenuList>\r\n                    </Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              //backgroundColor: \"#9F9FA5\",\r\n                              color: \"#000\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n    \r\n        </CardBody>\r\n       </Card>\r\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\r\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Vaccination\\AddViccination.js",["346","347","348","349","350","351","352"],"import React, {useState, useEffect} from 'react';\r\nimport { Modal, ModalHeader, ModalBody,Form,FormFeedback,\r\nRow,Col, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst Vaccination = (props) => {\r\n    console.log(props)\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/VACCINATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {\r\n        //console.log(values)\r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'VICCINATION'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          //objValues.visit_date= ''\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Vaccination Successful\");\r\n                  props.toggle()\r\n                  props.loadPatients()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal isOpen={props.showModal} toggle={props.toggle} className={props.className} size=\"lg\">\r\n              <Form >\r\n             <ModalHeader toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>Vaccination </ModalHeader>\r\n                <ModalBody>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </ModalBody>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Vaccination;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\api.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\RegisterPatient.js",["353","354","355"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport {\r\n\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  FormFeedback,\r\n} from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//import { FaArrowLeft } from \"react-icons/fa\";\r\nimport { TiArrowBack } from 'react-icons/ti'\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n      margin: theme.spacing(1)\r\n  },\r\n  error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"12.8px\",\r\n  },\r\n}))\r\n\r\nconst UserRegistration = (props) => {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({address: \"\",dob: \"\",first_name: \"\",gender: \"\",last_name: \"\",mid_name: \"\",participant_id: \"\", phone: \"\",status:\"\" });\r\n  const [errors, setErrors] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  const handleInputChange = e => {\r\n    setValues ({...values,  [e.target.name]: e.target.value});\r\n  }\r\n      /*****  Validation */\r\n      const validate = () => {\r\n        let temp = { ...errors };\r\n        temp.dob = values.dob\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.first_name = values.first_name\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.last_name = values.last_name\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.gender = values.gender\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.participant_id = values.participant_id\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            setErrors({\r\n                ...temp,\r\n            });\r\n            return Object.values(temp).every((x) => x === \"\");\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n          //console.log(values)\r\n          e.preventDefault();\r\n                if (validate()) {      \r\n                        setSaving(true);\r\n                        axios.post(`${baseUrl}covid/patients`,values,\r\n                         { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                        \r\n                        )\r\n                            .then(response => {\r\n                                setSaving(false);\r\n                                toast.success(\"Patient Register Successful\");\r\n                                history.push(\"/\")\r\n    \r\n                            })\r\n                            .catch(error => {\r\n                                setSaving(false);\r\n                                toast.error(\"Something went wrong\");\r\n                            });\r\n                };\r\n            }\r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer autoClose={3000} hideProgressBar />\r\n       \r\n        <Card className={classes.cardBottom}>\r\n        <CardContent>\r\n            <Link\r\n                  to ={{pathname: \"/\" }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<TiArrowBack />}\r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>Back </span>\r\n              </Button>\r\n            </Link>\r\n            <br />\r\n          \r\n          <br />\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      \r\n      <div className=\"col-xl-12 col-lg-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <h5 className=\"card-title\">Basic Information </h5>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"basic-form\">\r\n                <form >\r\n                  <div className=\"row\">\r\n                \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"participant_id\">Patient ID * </Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"participant_id\"\r\n                            id=\"participant_id\"\r\n                            onChange={handleInputChange}\r\n                            value={values.participant_id}\r\n                            required\r\n                          />\r\n                          {errors.participant_id !==\"\" ? (\r\n                            <span className={classes.error}>{errors.participant_id}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                      <Label for=\"first_name\">First Name *</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"first_name\"\r\n                        id=\"first_name\"\r\n                        onChange={handleInputChange}\r\n                        value={values.first_name}\r\n                        required\r\n                      />\r\n                      {errors.first_name !==\"\" ? (\r\n                            <span className={classes.error}>{errors.first_name}</span>\r\n                        ) : \"\" }\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                      <Label >Middle Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"mid_name\"\r\n                        id=\"mid_name\"\r\n                        onChange={handleInputChange}\r\n                        value={values.mid_name}\r\n                        required\r\n                      />\r\n                      </FormGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                      <Label >Last Name *</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"last_name\"\r\n                        id=\"last_name\"\r\n                        onChange={handleInputChange}\r\n                        value={values.last_name}\r\n                        required\r\n                      />\r\n                      {errors.last_name !==\"\" ? (\r\n                            <span className={classes.error}>{errors.last_name}</span>\r\n                        ) : \"\" }\r\n                      </FormGroup>\r\n                    </div>\r\n                   </div>\r\n                   <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Date of Birth*</Label>\r\n                          <DateTimePicker\r\n                              time={false}\r\n                              name=\"dateRegistration\"\r\n                              id=\"dateRegistration\"\r\n                              value={values.regDate}\r\n                              onChange={value1 =>\r\n                                setValues({ ...values, dob: moment(value1).format(\"YYYY-MM-DD\") })\r\n                              }\r\n                              \r\n                                  max={new Date()}\r\n                          />\r\n                              {values.dob ===\"Invalid date\" ? (\r\n                                  <span className={classes.error}>{\"This field is required\"}</span>\r\n                              ) : \"\" }\r\n                              {errors.dob !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dob}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Gender *</Label>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"gender\"\r\n                            id=\"gender\"\r\n                            value={values.gender}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            >\r\n                              <option value=\"\"> Please Select</option>\r\n                            <option value=\"1\"> Male</option>\r\n                            <option value=\"2\"> Female</option>\r\n                        </Input>\r\n                        {errors.gender !==\"\" ? (\r\n                            <span className={classes.error}>{errors.gender}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Phone Number *</Label>\r\n                          <Input\r\n                            type=\"number\"\r\n                            name=\"phone\"\r\n                            id=\"phone\"\r\n                            onChange={handleInputChange}\r\n                            value={values.phone}\r\n                            required\r\n                          />\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Address</Label>\r\n                          <Input\r\n                            type=\"textarea\"\r\n                            name=\"address\"\r\n                            id=\"address\"\r\n                            onChange={handleInputChange}\r\n                            value={values.address}\r\n                            required\r\n                          />\r\n                        </FormGroup>\r\n                    </div>\r\n                   </div>\r\n                \r\n                  {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n             \r\n                <MatButton\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<SaveIcon />}\r\n                onClick={handleSubmit}\r\n              >\r\n                {!saving ? (\r\n                  <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                ) : (\r\n                  <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                )}\r\n              </MatButton>\r\n              <Link\r\n                  to ={{pathname: \"/\" }}\r\n              >\r\n              <MatButton\r\n                variant=\"contained\"\r\n                className={classes.button}\r\n                startIcon={<CancelIcon />}\r\n                \r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n              </MatButton>\r\n              </Link>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n        </CardContent>\r\n        </Card>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default UserRegistration","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\EditPatient.js",["356","357","358"],"import axios from \"axios\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport MatButton from \"@material-ui/core/Button\";\r\nimport {\r\n\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  FormFeedback,\r\n} from \"reactstrap\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport { ToastContainer, toast} from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n//import { FaArrowLeft } from \"react-icons/fa\";\r\nimport { TiArrowBack } from 'react-icons/ti'\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"react-widgets/dist/css/react-widgets.css\";\r\nimport { DateTimePicker } from \"react-widgets\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n      margin: theme.spacing(1)\r\n  },\r\n  error: {\r\n      color: \"#f85032\",\r\n      fontSize: \"12.8px\",\r\n  },\r\n}))\r\n\r\nconst EditPatient = (props) => {\r\n   \r\n  let history = useHistory();\r\n  const patientObj = history.location && history.location.state ? history.location.state.patientObj : {}\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState(history.location && history.location.state ? history.location.state.patientObj : {});\r\n  const [errors, setErrors] = useState({});\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setValues(patientObj)\r\n  }, [history.location.state.patientObj]);\r\n  const handleInputChange = e => {\r\n    setValues ({...values,  [e.target.name]: e.target.value});\r\n  }\r\n  console.log(values)\r\n      /*****  Validation */\r\n      const validate = () => {\r\n        let temp = { ...errors };\r\n        temp.dob = values.dob\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.first_name = values.first_name\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.last_name = values.last_name\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.gender = values.gender\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            temp.participant_id = values.participant_id\r\n            ? \"\"\r\n            : \"this field is required\";\r\n            setErrors({\r\n                ...temp,\r\n            });\r\n            return Object.values(temp).every((x) => x === \"\");\r\n        };\r\n\r\n        const handleSubmit = (e) => {\r\n          console.log(values)\r\n          e.preventDefault();\r\n                if (validate()) {      \r\n                        setSaving(true);\r\n                        axios.post(`${baseUrl}covid/patients`,values,\r\n                         { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n                        \r\n                        )\r\n                            .then(response => {\r\n                                setSaving(false);\r\n                                toast.success(\"Patient Register Successful\");\r\n                                history.push(\"/\")\r\n    \r\n                            })\r\n                            .catch(error => {\r\n                                setSaving(false);\r\n                                toast.error(\"Something went wrong\");\r\n                            });\r\n                };\r\n            }\r\n\r\n\r\n  return (\r\n    <>\r\n    <ToastContainer autoClose={3000} hideProgressBar />\r\n       \r\n        <Card className={classes.cardBottom}>\r\n        <CardContent>\r\n            <Link\r\n                  to ={{pathname: \"/\" }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-right ms-1\"\r\n                startIcon={<TiArrowBack />}\r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>Back </span>\r\n              </Button>\r\n            </Link>\r\n            <br />\r\n          \r\n          <br />\r\n      <ToastContainer autoClose={3000} hideProgressBar />\r\n      \r\n      <div className=\"col-xl-12 col-lg-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-header\">\r\n              <h5 className=\"card-title\">Basic Information </h5>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <div className=\"basic-form\">\r\n                <form >\r\n                  <div className=\"row\">\r\n                \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label for=\"participant_id\">Patient ID * </Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            name=\"participant_id\"\r\n                            id=\"participant_id\"\r\n                            onChange={handleInputChange}\r\n                            value={values.participant_id}\r\n                            required\r\n                          />\r\n                          {errors.participant_id !==\"\" ? (\r\n                            <span className={classes.error}>{errors.participant_id}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                      <Label for=\"first_name\">First Name *</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"first_name\"\r\n                        id=\"first_name\"\r\n                        onChange={handleInputChange}\r\n                        value={values.first_name}\r\n                        required\r\n                      />\r\n                      {errors.first_name !==\"\" ? (\r\n                            <span className={classes.error}>{errors.first_name}</span>\r\n                        ) : \"\" }\r\n                      </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                      <Label >Middle Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"mid_name\"\r\n                        id=\"mid_name\"\r\n                        onChange={handleInputChange}\r\n                        value={values.mid_name}\r\n                        required\r\n                      />\r\n                      </FormGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                      <FormGroup>\r\n                      <Label >Last Name *</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"last_name\"\r\n                        id=\"last_name\"\r\n                        onChange={handleInputChange}\r\n                        value={values.last_name}\r\n                        required\r\n                      />\r\n                      {errors.last_name !==\"\" ? (\r\n                            <span className={classes.error}>{errors.last_name}</span>\r\n                        ) : \"\" }\r\n                      </FormGroup>\r\n                    </div>\r\n                   </div>\r\n                   <div className=\"row\">\r\n                    <div className=\"form-group mb-3 col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Date of Birth*</Label>\r\n                          <DateTimePicker\r\n                              time={false}\r\n                              name=\"dateRegistration\"\r\n                              id=\"dateRegistration\"\r\n                              value={values.regDate}\r\n                              onChange={value1 =>\r\n                                setValues({ ...values, dob: moment(value1).format(\"YYYY-MM-DD\") })\r\n                              }\r\n                              defaultValue={new Date(new Date(moment(values.dob, \"YYYY-MM-DD\").format(\"MM/DD/YYYY\") ))}\r\n                                  max={new Date()}\r\n                          />\r\n                              {values.dob ===\"Invalid date\" ? (\r\n                                  <span className={classes.error}>{\"This field is required\"}</span>\r\n                              ) : \"\" }\r\n                              {errors.dob !==\"\" ? (\r\n                            <span className={classes.error}>{errors.dob}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Gender *</Label>\r\n                          <Input\r\n                            type=\"select\"\r\n                            name=\"gender\"\r\n                            id=\"gender\"\r\n                            value={values.gender}\r\n                            onChange={handleInputChange}\r\n                            required\r\n                            >\r\n                              <option value=\"\"> Please Select</option>\r\n                            <option value=\"1\"> Male</option>\r\n                            <option value=\"2\"> Female</option>\r\n                        </Input>\r\n                        {errors.gender !==\"\" ? (\r\n                            <span className={classes.error}>{errors.gender}</span>\r\n                        ) : \"\" }\r\n                        </FormGroup>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Phone Number *</Label>\r\n                          <Input\r\n                            type=\"number\"\r\n                            name=\"phone\"\r\n                            id=\"phone\"\r\n                            onChange={handleInputChange}\r\n                            value={values.phone}\r\n                            required\r\n                          />\r\n                        </FormGroup>\r\n                    </div>\r\n                    <div className=\"form-group  col-md-4\">\r\n                        <FormGroup>\r\n                          <Label >Address</Label>\r\n                          <Input\r\n                            type=\"textarea\"\r\n                            name=\"address\"\r\n                            id=\"address\"\r\n                            onChange={handleInputChange}\r\n                            value={values.address}\r\n                            required\r\n                          />\r\n                        </FormGroup>\r\n                    </div>\r\n                   </div>\r\n                \r\n                  {saving ? <Spinner /> : \"\"}\r\n              <br />\r\n             \r\n                <MatButton\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<SaveIcon />}\r\n                onClick={handleSubmit}\r\n              >\r\n                {!saving ? (\r\n                  <span style={{ textTransform: \"capitalize\" }}>Save</span>\r\n                ) : (\r\n                  <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\r\n                )}\r\n              </MatButton>\r\n              <Link\r\n                  to ={{pathname: \"/\" }}\r\n              >\r\n              <MatButton\r\n                variant=\"contained\"\r\n                className={classes.button}\r\n                startIcon={<CancelIcon />}\r\n                \r\n              >\r\n                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\r\n              </MatButton>\r\n              </Link>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n        </CardContent>\r\n        </Card>\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default EditPatient","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientDetail.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientCard.js",["359","360","361","362"],"import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport classNames from 'classnames';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n//import Chip from '@material-ui/core/Chip';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { Grid, Step, Label, Segment, Icon } from \"semantic-ui-react\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Col, Row } from \"reactstrap\";\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer'\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nfunction PatientCard(props) {\r\n  const { classes } = props;\r\n  const patientObj = props.patientObj ? props.patientObj : {}\r\n  const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n  const calculate_age = dob => {\r\n    var today = new Date();\r\n    var dateParts = dob.split(\"-\");\r\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n    var age_now = today.getFullYear() - birthDate.getFullYear();\r\n    var m = today.getMonth() - birthDate.getMonth();\r\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                age_now--;\r\n            }\r\n        if (age_now === 0) {\r\n                return m + \" month(s)\";\r\n            }\r\n            return age_now + \" year(s)\";\r\n    };\r\n    const loadTransferModal =()=> {\r\n      //setpatientObj({...patientObj, ...row});\r\n          setTransferModal(!transferModal)\r\n  }\r\n\r\n  const CurrentStatus = (currentStatus)=>{\r\n    if(currentStatus===\"4\"){\r\n        return (<Label color=\"blue\" size=\"mini\">Current Status: Admitted</Label>);\r\n    }else if(currentStatus===\"5\"){\r\n        return (<Label color=\"olive\" size=\"mini\">Current Status:vICU</Label>);\r\n    }else if(currentStatus===\"6\"){\r\n        return (<Label color=\"teal\" size=\"mini\">Current Status:Discharge</Label>);\r\n    }else if(currentStatus===\"7\"){\r\n        return (<Label color=\"red\" size=\"mini\">Current Status: Dead</Label>);\r\n    }else {\r\n        return   (<Label color=\"green\" size=\"mini\">Current Status: Active</Label>);\r\n    }\r\n\r\n}\r\n\r\nconst VaccinationStatus = (patient)=>{\r\n    //console.log(patient)\r\n    if(patient.vaccination_status===null){\r\n        return (<><Label color=\"yellow\" size=\"mini\">Vaccination Status: Not Vaccinated</Label></> )\r\n    }else if(patient.vaccination_status===\"1\"){\r\n        return (<><Label color=\"teal\" size=\"mini\">Vaccination Status: Partially Vaccinated</Label></> )\r\n    }else if(patient.vaccination_status===\"2\"){\r\n        return (<><Label color=\"green\" size=\"mini\">Vaccination Status: Fully Vaccinated</Label></> )\r\n    }else {\r\n        return \"\"\r\n    }\r\n}\r\n\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n       <ExpansionPanel defaultExpanded>\r\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n                \r\n                <Row>\r\n                    \r\n                    <Col md={11}>\r\n                    <Row className={\"mt-1\"}>\r\n                    <Col md={12} className={classes.root2}>\r\n                        <b style={{fontSize: \"25px\"}}>\r\n                        {patientObj.first_name + \" \" + patientObj.last_name }\r\n                        </b>\r\n                        \r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Patient ID : <b>{patientObj.participant_id }</b>\r\n                    </span>\r\n                    </Col>\r\n\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        Date Of Birth : <b>{patientObj.dob }</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Age : <b>{calculate_age(moment(patientObj.dob).format(\"DD-MM-YYYY\"))}</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Gender :{\" \"}\r\n                        <b>{patientObj.gender===1?\"Male\": \"Female\" }</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Phone Number : <b>{patientObj.phone }</b>\r\n                    </span>\r\n                    </Col>\r\n                    <Col md={4} className={classes.root2}>\r\n                    <span>\r\n                        {\" \"}\r\n                        Address : <b>{patientObj.address } </b>\r\n                    </span>\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                    {VaccinationStatus(patientObj)}\r\n                    {CurrentStatus(patientObj.current_status)}\r\n                    \r\n                    </Col>\r\n                    </Row>\r\n                    </Col>\r\n                </Row>\r\n            \r\n                </ExpansionPanelSummary>\r\n                <ExpansionPanelDetails className={classes.details}>\r\n                <div className={classes.column} >\r\n                    <Button\r\n                            color='red'\r\n                            content='BloodType'\r\n                            //icon='heart'\r\n                            label={{ basic: true, color: 'red', pointing: 'left', content: 'AB+' }}\r\n                            />\r\n                            \r\n                    </div>\r\n                <div className={classes.column}>\r\n                <Button\r\n                            basic\r\n                            color='blue'\r\n                            content='Height'\r\n                            icon='fork'\r\n                            label={{\r\n                                as: 'a',\r\n                                basic: true,\r\n                                color: 'blue',\r\n                                pointing: 'left',\r\n                                content: '74.5 in',\r\n                            }}\r\n                            />\r\n                </div>\r\n                <div className={classes.column}>\r\n                <Button\r\n                            basic\r\n                            color='blue'\r\n                            content='Weight'\r\n                            icon='fork'\r\n                            label={{\r\n                                as: 'a',\r\n                                basic: true,\r\n                                color: 'blue',\r\n                                pointing: 'left',\r\n                                content: '74.5 in',\r\n                            }}\r\n                            />\r\n                </div>\r\n                <div className={classNames(classes.column, classes.helper)}>\r\n                    <Typography variant=\"caption\">\r\n                    <Label color={\"blue\"} size={\"tiny\"} onClick={() => loadTransferModal()} style={{cursor:\"pointer\"}}>\r\n                        Transfer\r\n                        \r\n                    </Label>\r\n                   \r\n                    </Typography>\r\n                </div>\r\n                </ExpansionPanelDetails>\r\n                <Divider />\r\n                <ExpansionPanelActions expandIcon={<ExpandMoreIcon />}>\r\n                \r\n                </ExpansionPanelActions>\r\n            </ExpansionPanel>\r\n            {/* <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj}/> */}\r\n            <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} />\r\n    </div>\r\n  );\r\n}\r\n\r\nPatientCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(PatientCard);\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\AddmissionHome.js",["363","364","365","366"],"import React,{useState, useEffect} from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n//import { Link } from 'react-router-dom'\r\n//import ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport axios from \"axios\";\r\n\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { Grid,  Label, Segment, Icon, List, Button, Image } from \"semantic-ui-react\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { useHistory } from \"react-router-dom\";\r\n//import {  Button } from \"react-bootstrap\";\r\nimport InclusionCriteria from './InclusionCriteria';\r\nimport Demographic from './Demograhic';\r\nimport Viccination from './Vaccination';\r\nimport  Comorbitie from './Comorbitie';\r\nimport  VitalSign from './VitalSign';\r\nimport  ReInfection from './ReInfection';\r\nimport ChronicMedication from './ChronicMedication';\r\nimport  Medication from './Medication';\r\nimport  SignsSymptoms from './SignsSymptons';\r\nimport  SupportiveCare from './SupportiveCare';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nlet resultData=\"\"\r\n\r\nfunction AddmissionHome(props) {\r\n    let history = useHistory();\r\n    const { classes } = props;\r\n    const patientObjValue = history.location && history.location.state ? history.location.state.patientObj : {}\r\n    const [patientObj, setpatientObj] = useState(patientObjValue)\r\n    const [inclusionCriteriaModal, setInclusionCriteriaModal] = useState(false);\r\n    const inclusionCriteriaToggle = () => setInclusionCriteriaModal(!inclusionCriteriaModal);\r\n    const [demographicModal, setDemographicModal] = useState(false);\r\n    const demographicToggle = () => setDemographicModal(!demographicModal);\r\n    const [viccinationModal, setViccinationModal] = useState(false);\r\n    const ViccinationToggle = () => setViccinationModal(!viccinationModal);\r\n    const [comorbitieModal, setComorbitieModal] = useState(false);\r\n    const ComorbitieToggle = () => setComorbitieModal(!comorbitieModal);\r\n    const [vitalSignModal, setVitalSignModal] = useState(false);\r\n    const VitalSignToggle = () => setVitalSignModal(!vitalSignModal);\r\n    const [reInfectionModal, setReinfectionModal] = useState(false);\r\n    const ReinfectionToggle = () => setReinfectionModal(!reInfectionModal);\r\n    const [signsSymptomsModal, setSignsSymptomsModal] = useState(false);\r\n    const SignsSymptomsToggle = () => setSignsSymptomsModal(!signsSymptomsModal);\r\n    const [medicationModal, setMedicationModal] = useState(false);\r\n    const MedicationToggle = () => setMedicationModal(!medicationModal);\r\n    const [chronicMedicationModal, setChronicMedicationModal] = useState(false);\r\n    const ChronicMedicationToggle = () => setChronicMedicationModal(!chronicMedicationModal);\r\n    const [supportiveCareModal, setSupportiveCareModal] = useState(false);\r\n    const SupportiveCareToggle = () => setSupportiveCareModal(!supportiveCareModal);\r\n\r\n    const loadInclusionCriteriaModal =()=> {\r\n          setInclusionCriteriaModal(!inclusionCriteriaModal)\r\n    }\r\n    const DemographicModal =()=> {\r\n      setDemographicModal(!demographicModal)\r\n    }\r\n    const ViccinationModal =()=> {\r\n      setViccinationModal(!viccinationModal)\r\n    }\r\n    const VitalSignModal =()=> {\r\n      setVitalSignModal(!vitalSignModal)\r\n    }\r\n    const ComorbitieModal =()=> {\r\n      setComorbitieModal(!comorbitieModal)\r\n    }\r\n    const ReInfectionModal =()=> {\r\n      setReinfectionModal(!reInfectionModal)\r\n    }\r\n    const SignsSymptomsModal =()=> {\r\n      setSignsSymptomsModal(!signsSymptomsModal)\r\n    }\r\n    const ChronicMedicationModal =()=> {\r\n      setChronicMedicationModal(!chronicMedicationModal)\r\n    }\r\n    const MedicationModal =()=> {\r\n      setMedicationModal(!medicationModal)\r\n    }\r\n    const SupportiveCareModal =()=> {\r\n      setSupportiveCareModal(!supportiveCareModal)\r\n    }\r\n    useEffect(() => {\r\n      getAdmissionCategory()\r\n    },[])\r\n    const getAdmissionCategory = (category) => {\r\n      axios\r\n        .get(`${baseUrl}covid/encounters/1/VACCINATION_STATUS`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n          resultData=response.data\r\n            //setVaccination(response.data);\r\n            //setValues(response.data)\r\n        })\r\n        .catch((error) => {    \r\n        }); \r\n        //return resultData\r\n    }\r\n  console.log(resultData)\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card >\r\n        <CardContent>\r\n       \r\n            {/* Sematic Ui Card */}\r\n            <Grid centered columns={2} padded>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                <Label as='a' color='blue'  ribbon>\r\n                        INCLUSION CRITERIA \r\n                        \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() =>loadInclusionCriteriaModal()}/>\r\n                    <List divided verticalAlign='middle'>\r\n                    {resultData!==\"\" && resultData.map((value) => (\r\n                          <>\r\n                          \r\n                            <List.Item>\r\n                              <List.Content floated='right'>\r\n                              <Label>\r\n                                View\r\n                              </Label>\r\n                              </List.Content>\r\n                              <Icon name='info circle'  />\r\n                              <List.Content>Lena</List.Content>\r\n                            </List.Item>\r\n                          </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='orange' ribbon='left'>\r\n                        DEMOGRAPHICS \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => DemographicModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='brown' ribbon>\r\n                    VACCINATION \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ViccinationModal()}/>\r\n\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='pink' ribbon='left'>\r\n                        VITAL SIGNS \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => VitalSignModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='purple' ribbon>\r\n                    CO-MORBIDITIE\r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ComorbitieModal()}/> \r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='violet' ribbon='left'>\r\n                    REINFECTION\r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ReInfectionModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='teal' ribbon>\r\n                    SIGNS AND SYMPTOMS\r\n                   \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => SignsSymptomsModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='green' ribbon='left'>\r\n                    CHRONIC MEDICATION \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ChronicMedicationModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='olive' ribbon>\r\n                    MEDICATION  \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => MedicationModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='yellow' ribbon='left'>\r\n                    SUPPORTIVE CARE \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\"  style={{cursor: 'pointer'}} onClick={() => SupportiveCareModal()}/>\r\n                </Segment>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n         </CardContent>\r\n      </Card>\r\n\r\n      <InclusionCriteria toggle={inclusionCriteriaToggle} showModal={inclusionCriteriaModal} patientObj={patientObj}/>\r\n      <Demographic toggle={demographicToggle} showModal={demographicModal} patientObj={patientObj} />\r\n      <Viccination toggle={ViccinationToggle} showModal={viccinationModal} patientObj={patientObj} />\r\n      <VitalSign toggle={VitalSignToggle} showModal={vitalSignModal} patientObj={patientObj} />\r\n      <Comorbitie toggle={ComorbitieToggle} showModal={comorbitieModal} patientObj={patientObj} />\r\n      <ReInfection toggle={ReinfectionToggle} showModal={reInfectionModal} patientObj={patientObj} />\r\n      <ChronicMedication toggle={ChronicMedicationToggle} showModal={chronicMedicationModal} patientObj={patientObj} />\r\n      <Medication toggle={MedicationToggle} showModal={medicationModal} patientObj={patientObj} />\r\n      <SignsSymptoms toggle={SignsSymptomsToggle} showModal={signsSymptomsModal} patientObj={patientObj} />\r\n      <SupportiveCare toggle={SupportiveCareToggle} showModal={supportiveCareModal} patientObj={patientObj} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(AddmissionHome);\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\InclusionCriteria.js",["367","368","369","370"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst InclusionCriteria = (props) => {\r\n    \r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/INCLUSION_CRITERIA`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'INCLUSION_CRITERIA'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Save Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Inclusion Criteria \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InclusionCriteria;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Demograhic.js",["371","372","373","374"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst Demograhic = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/DEMOGRAPHICS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'DEMOGRAPHICS'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Demographics Save Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Demograhics \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Demograhic;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Vaccination.js",["375","376","377","378"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst Viccination = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/VACCINATION_STATUS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'VACCINATION_STATUS'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Viccination Status Save Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Vaccination Status\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Viccination;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Comorbitie.js",["379","380","381","382"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst Commorbitie = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/COMORBIDITIES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'COMORBIDITIES'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Co-Morbitie\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Commorbitie;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\ReInfection.js",["383","384","385","386"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst ReInfection = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/REINFECTION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'REINFECTION'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                Reinfection \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReInfection;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\VitalSign.js",["387","388","389","390"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst VitalSigns = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/ADMISSION_VITAL_SIGNS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'ADMISSION_VITAL_SIGNS'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Record save successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Admission Vital Signs\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VitalSigns;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\Index.js",["391"],"import React from \"react\";\r\n// import { Link } from 'react-router-dom';\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\n\r\nimport PageTitle from \"../../../layouts/PageTitle\";\r\n\r\nimport Bmi from \"./Bmi\";\r\nimport Height from \"./Height\";\r\nimport ViccinationStatus from \"./ViccinationStatus\";\r\n//import LegendEffectOpacity from \"./LegendEffectOpacity\";\r\n\r\nfunction RechartJs() {\r\n  return (\r\n    <>\r\n      <PageTitle motherMenu=\"Charts\" activeMenu=\"ReChartJs\" />\r\n      <Row>\r\n        <Col xl={4} lg={4}>\r\n          <Card>            \r\n            <Card.Body>\r\n                <p>Blood presure(7)                    \r\n                    <span className=\"float-end text-success\">Normal</span>\r\n                </p>\r\n                <p><h5>125/85mm/hg</h5></p>                \r\n              <Bmi />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={4} lg={4}>\r\n          <Card>           \r\n            <Card.Body>\r\n            <p>Heart Rate(12)                    \r\n                    <span className=\"float-end text-success\">Normal</span>\r\n                </p>\r\n                <p><h5>85 per min</h5></p>\r\n              <Height />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={4} lg={4}>\r\n          <Card>            \r\n            <Card.Body>\r\n            <p>Oxygen Sat.(2)                    \r\n                    <span className=\"float-end text-danger\">Below Normal</span>\r\n                </p>\r\n                <p><h5>81%</h5></p>\r\n                <Height />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        <Col xl={4} lg={4}>\r\n          <Card>            \r\n            <Card.Body>\r\n                <p>BMI Status(8)                    \r\n                    <span className=\"float-end text-danger\">Overweight</span>\r\n                </p>\r\n                <p><h5>25.4</h5></p>                \r\n              <Bmi />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={4} lg={4}>\r\n          <Card>           \r\n            <Card.Body>\r\n            <p>Temperature(4)                    \r\n                    <span className=\"float-end text-success\">Normal</span>\r\n                </p>\r\n                <p><h5>97.00<sup>o</sup>F (36<sup>o</sup>C)</h5></p>\r\n              <Height />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col xl={4} lg={4}>\r\n          <Card>            \r\n            <Card.Body>\r\n            <p>Respiration(1)                    \r\n                    <span className=\"float-end text-success\"> Normal</span>\r\n                </p>\r\n                <p><h5>22 per min</h5></p>\r\n                <Height />\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        \r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RechartJs;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\Height.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\Bmi.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\PatientChart\\ViccinationStatus.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\AdmissionList.js",["392","393","394","395","396","397","398"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Vaccination from './../Vaccination/AddViccination'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer'\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst Patients = (props) => {\r\n    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [patientObj, setpatientObj] = useState([])\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data)\r\n                    setPatientList(response.data.filter((x)=> x.current_status===\"4\"));\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n\r\n    const loadVaccinationModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setModal(!modal)\r\n    }\r\n    const loadTransferModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setTransferModal(!transferModal)\r\n    }\r\n    const VaccinationStatusIcon = (patient)=>{\r\n        //patient.first_name + \" \"  + patient. last_name,\r\n        if(patient.vaccination_status===\"\"){\r\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else {\r\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }\r\n    }\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\r\n        }\r\n\r\n    }\r\n\r\n   \r\n  return (\r\n    <div>\r\n       <Card>\r\n         <CardBody>\r\n\r\n         <Link to={\"register-patient\"} >\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<FaUserPlus size=\"10\"/>}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n            </Button>\r\n            </Link>        \r\n        <br/><br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Find Patient \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Patient Name\",\r\n                  field: \"name\",\r\n                },\r\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                { title: \"Address\", field: \"address\", filtering: false },\r\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\r\n                { title: \"DOB\", field: \"dob\", filtering: false },\r\n                { title: \"Age\", field: \"age\", filtering: false },\r\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              data={ patientList.map((row) => ({\r\n                  //Id: manager.id,\r\n                    name: VaccinationStatusIcon(row),\r\n                    hospital_number: row.participant_id,\r\n                    address: row.address,\r\n                    phone_number:  row.phone,\r\n                    dob:row.dob,\r\n                    age: (row.dob === 0 ||\r\n                        row.dob === undefined ||\r\n                        row.dob === null ||\r\n                        row.dob === \"\" )\r\n                          ? 0\r\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n                    v_status:  VaccinationStatus(row),\r\n                    status: CurrentStatus(row.current_status) \r\n                            ,\r\n                    actions:\r\n            \r\n                    <div>\r\n                    <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\r\n                          Actions <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{ color:\"#000000 !important\"}} >\r\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \r\n                                    <Link\r\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\r\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\r\n                                  </Link>                               \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\r\n                                        <Link\r\n                                            to={{\r\n                                              pathname: \"/edit-patient\",\r\n                                              state: { patientObj: row  }\r\n                                            }}>\r\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \r\n                                      </Link>\r\n                                  </MenuItem>                                      \r\n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\r\n                                     \r\n                                        <FaShare size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Transfer</span>\r\n                                                                    \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\r\n                                     \r\n                                        <FaSyringe size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Vaccination</span>\r\n                                                                   \r\n                                  </MenuItem>\r\n                                  \r\n                          </MenuList>\r\n                    </Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              //backgroundColor: \"#9F9FA5\",\r\n                              color: \"#000\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n    \r\n        </CardBody>\r\n       </Card>\r\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\r\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\SignsSymptons.js",["399","400","401","402"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst SignsSymptons = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/SIGNS_AND_SYMPTOMS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'SIGNS_AND_SYMPTOMS'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                Signs and Symptoms \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignsSymptons;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\ChronicMedication.js",["403","404","405","406"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst ChronicMedication = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/CHRONIC_MEDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'CHRONIC_MEDICATION'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                Chronic Medication \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChronicMedication;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\Medication.js",["407","408","409","410"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"../../../api\";\r\nimport { token as token } from \"../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst Medication = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/MEDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'MEDICATION'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                Medication \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Medication;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Admission\\SupportiveCare.js",["411","412","413","414"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst SupportiveCare = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/REINFECTION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'REINFECTION'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Inclusion Criteria Successful\");\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                Supportive Care \r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SupportiveCare;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Transfer\\Transfer.js",["415","416","417","418","419","420"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst VitalSigns = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [transferStatus, setTransferStatus] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({patient_id: \"\",current_status:\"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patientstatus/current-status-codeset`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setTransferStatus(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        \r\n          objValues.patient_id= patientObj.id\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/patientstatus`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Transfer successful\");\r\n                  props.toggle()\r\n                  props.loadPatients()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Transfer - <b>{patientObj.first_name + \" \" + patientObj.last_name }</b>\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                <FormGroup>\r\n                                    <Label >Transfer Status</Label>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        name=\"current_status\"\r\n                                        id=\"current_status\"\r\n                                        value={objValues.current_status}\r\n                                        onChange={handleInputChange}\r\n                                        required\r\n                                        >\r\n                                        <option value=\"\"> Please Select</option>\r\n                                        \r\n                                            {transferStatus.map(({ name, id }) => (\r\n                                                <option key={id} value={id}>\r\n                                                {name}\r\n                                                </option>\r\n                                            ))}\r\n                                    </Input>\r\n                                    {/* {errors.gender !==\"\" ? (\r\n                                        <span className={classes.error}>{errors.gender}</span>\r\n                                    ) : \"\" } */}\r\n                                    </FormGroup>\r\n                                  </Row>\r\n                                    \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VitalSigns;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\ICU\\ICUList.js",["421","422","423","424","425","426","427"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Vaccination from './../Vaccination/AddViccination'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer'\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst Patients = (props) => {\r\n    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [patientObj, setpatientObj] = useState([])\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data)\r\n                    setPatientList(response.data.filter((x)=> x.current_status===\"5\"));\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n\r\n    const loadVaccinationModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setModal(!modal)\r\n    }\r\n    const loadTransferModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setTransferModal(!transferModal)\r\n    }\r\n    const VaccinationStatusIcon = (patient)=>{\r\n        //patient.first_name + \" \"  + patient. last_name,\r\n        if(patient.vaccination_status===\"\"){\r\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else {\r\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }\r\n    }\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n       <Card>\r\n         <CardBody>\r\n\r\n         <Link to={\"register-patient\"} >\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<FaUserPlus size=\"10\"/>}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n            </Button>\r\n            </Link>        \r\n        <br/><br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Find ICU Patient \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Patient Name\",\r\n                  field: \"name\",\r\n                },\r\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                { title: \"Address\", field: \"address\", filtering: false },\r\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\r\n                { title: \"DOB\", field: \"dob\", filtering: false },\r\n                { title: \"Age\", field: \"age\", filtering: false },\r\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              data={ patientList.map((row) => ({\r\n                  //Id: manager.id,\r\n                    name: VaccinationStatusIcon(row),\r\n                    hospital_number: row.participant_id,\r\n                    address: row.address,\r\n                    phone_number:  row.phone,\r\n                    dob:row.dob,\r\n                    age: (row.dob === 0 ||\r\n                        row.dob === undefined ||\r\n                        row.dob === null ||\r\n                        row.dob === \"\" )\r\n                          ? 0\r\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n                    v_status:  VaccinationStatus(row),\r\n                    status: CurrentStatus(row.current_status) \r\n                            ,\r\n                    actions:\r\n            \r\n                    <div>\r\n                    <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\r\n                          Actions <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{ color:\"#000000 !important\"}} >\r\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \r\n                                    <Link\r\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\r\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\r\n                                  </Link>                               \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\r\n                                        <Link\r\n                                            to={{\r\n                                              pathname: \"/edit-patient\",\r\n                                              state: { patientObj: row  }\r\n                                            }}>\r\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \r\n                                      </Link>\r\n                                  </MenuItem>                                      \r\n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\r\n                                     \r\n                                        <FaShare size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Transfer</span>\r\n                                                                    \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\r\n                                     \r\n                                        <FaSyringe size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Vaccination</span>\r\n                                                                   \r\n                                  </MenuItem>\r\n                                  \r\n                          </MenuList>\r\n                    </Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              //backgroundColor: \"#9F9FA5\",\r\n                              color: \"#000\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n    \r\n        </CardBody>\r\n       </Card>\r\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadVaccinationaModal={loadVaccinationModal}/>\r\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\DischargeDead\\DischargeDeathList.js",["428","429","430","431","432","433","434"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Vaccination from './../Vaccination/AddViccination'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer'\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst Patients = (props) => {\r\n    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [patientObj, setpatientObj] = useState([])\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    //console.log(response.data)\r\n                    setPatientList(response.data.filter((x)=> x.current_status===\"7\" || x.current_status===\"6\"));\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n\r\n    const loadVaccinationModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setModal(!modal)\r\n    }\r\n    const loadTransferModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setTransferModal(!transferModal)\r\n    }\r\n    const VaccinationStatusIcon = (patient)=>{\r\n        //patient.first_name + \" \"  + patient. last_name,\r\n        if(patient.vaccination_status===\"\"){\r\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else {\r\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }\r\n    }\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n       <Card>\r\n         <CardBody>\r\n\r\n         <Link to={\"register-patient\"} >\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<FaUserPlus size=\"10\"/>}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\r\n            </Button>\r\n            </Link>        \r\n        <br/><br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Find Discharge/Dead Patient \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Patient Name\",\r\n                  field: \"name\",\r\n                },\r\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\r\n                { title: \"Address\", field: \"address\", filtering: false },\r\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\r\n                { title: \"DOB\", field: \"dob\", filtering: false },\r\n                { title: \"Age\", field: \"age\", filtering: false },\r\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              data={ patientList.map((row) => ({\r\n                  //Id: manager.id,\r\n                    name: VaccinationStatusIcon(row),\r\n                    hospital_number: row.participant_id,\r\n                    address: row.address,\r\n                    phone_number:  row.phone,\r\n                    dob:row.dob,\r\n                    age: (row.dob === 0 ||\r\n                        row.dob === undefined ||\r\n                        row.dob === null ||\r\n                        row.dob === \"\" )\r\n                          ? 0\r\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\r\n                    v_status:  VaccinationStatus(row),\r\n                    status: CurrentStatus(row.current_status) \r\n                            ,\r\n                    actions:\r\n            \r\n                    <div>\r\n                    <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\r\n                          Actions <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{ color:\"#000000 !important\"}} >\r\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \r\n                                    <Link\r\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\r\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\r\n                                  </Link>                               \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\r\n                                        <Link\r\n                                            to={{\r\n                                              pathname: \"/edit-patient\",\r\n                                              state: { patientObj: row  }\r\n                                            }}>\r\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \r\n                                      </Link>\r\n                                  </MenuItem>                                      \r\n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\r\n                                     \r\n                                        <FaShare size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Transfer</span>\r\n                                                                    \r\n                                  </MenuItem>\r\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\r\n                                     \r\n                                        <FaSyringe size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>Vaccination</span>\r\n                                                                   \r\n                                  </MenuItem>\r\n                                  \r\n                          </MenuList>\r\n                    </Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              //backgroundColor: \"#9F9FA5\",\r\n                              color: \"#000\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n    \r\n        </CardBody>\r\n       </Card>\r\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\r\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patients;\r\n\r\n\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\newcovid\\src\\jsx\\components\\Patient\\DeletePatient.js",["435","436","437","438","439","440","441","442","443"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst VitalSigns = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [transferStatus, setTransferStatus] = useState([])\r\n    const [objValues, setObjValues] = useState({patient_id: \"\",current_status:\"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patientstatus/current-status-codeset`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setTransferStatus(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        \r\n          objValues.patient_id= patientObj.id\r\n\r\n          setSaving(true);\r\n          axios.delete(`${baseUrl}covid/patients/${patientObj.id}`,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient delete successful\");\r\n                  props.toggle()\r\n                  props.loadPatients()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Delete Patient - <b>{patientObj.first_name + \" \" + patientObj.last_name }</b>\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                    <p><b>Are you sure want to delete</b></p>\r\n                                </Row>                                    \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VitalSigns;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\index.js",["444"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport SimpleReactLightbox from \"simple-react-lightbox\";\r\nimport  ThemeContext  from \"./context/ThemeContext\"; \r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\r\n            <SimpleReactLightbox>\r\n                <Router basename='/'>\r\n                    <ThemeContext>\r\n                        <App />\r\n                    </ThemeContext>  \r\n                </Router>\r\n            </SimpleReactLightbox>\r\n\r\n\t</React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\nreportWebVitals();\r\n",["445","446"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\App.js",["447"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\reportWebVitals.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\context\\ThemeContext.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\context\\ThemeDemo.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Home.js",["448"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\EditPatient.js",["449","450","451"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\RegisterPatient.js",["452","453","454"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientDetail.js",["455","456","457","458"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientList.js",["459","460","461","462","463","464","465"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\api.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientCard.js",["466","467","468","469"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\AdmissionList.js",["470","471","472","473","474","475","476"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\AddmissionHome.js",["477","478","479","480","481","482"],"import React,{useState, useEffect} from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n//import { Link } from 'react-router-dom'\r\n//import ButtonMui from \"@material-ui/core/Button\";\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport axios from \"axios\";\r\n\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { Grid,  Label, Segment, Icon, List, Button, Image } from \"semantic-ui-react\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { useHistory } from \"react-router-dom\";\r\n//import {  Button } from \"react-bootstrap\";\r\nimport InclusionCriteria from './InclusionCriteria';\r\nimport Demographic from './Demograhic';\r\nimport Viccination from './Vaccination';\r\nimport  Comorbitie from './Comorbitie';\r\nimport  VitalSign from './VitalSign';\r\nimport  ReInfection from './ReInfection';\r\nimport ChronicMedication from './ChronicMedication';\r\nimport  Medication from './Medication';\r\nimport  SignsSymptoms from './SignsSymptons';\r\nimport  SupportiveCare from './SupportiveCare';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: 'bottom',\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    alignItems: 'center',\r\n  },\r\n  column: {\r\n    flexBasis: '20.33%',\r\n  },\r\n  helper: {\r\n    borderLeft: `2px solid ${theme.palette.divider}`,\r\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n    textDecoration: 'none',\r\n    '&:hover': {\r\n      textDecoration: 'underline',\r\n    },\r\n  },\r\n});\r\n\r\nlet resultData=\"\"\r\n\r\nfunction AddmissionHome(props) {\r\n    let history = useHistory();\r\n    const { classes } = props;\r\n    const patientObjValue = history.location && history.location.state ? history.location.state.patientObj : {}\r\n    const [patientObj, setpatientObj] = useState(patientObjValue)\r\n    const [inclusionCriteriaModal, setInclusionCriteriaModal] = useState(false);\r\n    const inclusionCriteriaToggle = () => setInclusionCriteriaModal(!inclusionCriteriaModal);\r\n    const [demographicModal, setDemographicModal] = useState(false);\r\n    const demographicToggle = () => setDemographicModal(!demographicModal);\r\n    const [viccinationModal, setViccinationModal] = useState(false);\r\n    const ViccinationToggle = () => setViccinationModal(!viccinationModal);\r\n    const [comorbitieModal, setComorbitieModal] = useState(false);\r\n    const ComorbitieToggle = () => setComorbitieModal(!comorbitieModal);\r\n    const [vitalSignModal, setVitalSignModal] = useState(false);\r\n    const VitalSignToggle = () => setVitalSignModal(!vitalSignModal);\r\n    const [reInfectionModal, setReinfectionModal] = useState(false);\r\n    const ReinfectionToggle = () => setReinfectionModal(!reInfectionModal);\r\n    const [signsSymptomsModal, setSignsSymptomsModal] = useState(false);\r\n    const SignsSymptomsToggle = () => setSignsSymptomsModal(!signsSymptomsModal);\r\n    const [medicationModal, setMedicationModal] = useState(false);\r\n    const MedicationToggle = () => setMedicationModal(!medicationModal);\r\n    const [chronicMedicationModal, setChronicMedicationModal] = useState(false);\r\n    const ChronicMedicationToggle = () => setChronicMedicationModal(!chronicMedicationModal);\r\n    const [supportiveCareModal, setSupportiveCareModal] = useState(false);\r\n    const SupportiveCareToggle = () => setSupportiveCareModal(!supportiveCareModal);\r\n    const [vaccinationHistory, setVaccinationHistory] = useState([])\r\n    const [inclusionHistory, setInclusionHistory] = useState([])\r\n    const [demograhicHistory, setDemographicHistory] = useState([])\r\n    const [vitalHistory, setVitalHistory] = useState([])\r\n    const [comobitieHistory, setComobitieHistory] = useState([])\r\n    const [reinfectionHistory, setReinfectionHistory] = useState([])\r\n    const [signsSymptomsHistory, setSignsSymptomsHistory] = useState([])\r\n    const [chronicMedicationHistory, setChronicMedicationHistory] = useState([])\r\n    const [medicationHistory, setMedicationHistory] = useState([])\r\n    const [supportiveCarenHistory, setSupportiveCareHistory] = useState([])\r\n\r\n    const loadInclusionCriteriaModal =()=> {\r\n          setInclusionCriteriaModal(!inclusionCriteriaModal)\r\n    }\r\n    const DemographicModal =()=> {\r\n      setDemographicModal(!demographicModal)\r\n    }\r\n    const ViccinationModal =()=> {\r\n      setViccinationModal(!viccinationModal)\r\n    }\r\n    const VitalSignModal =()=> {\r\n      setVitalSignModal(!vitalSignModal)\r\n    }\r\n    const ComorbitieModal =()=> {\r\n      setComorbitieModal(!comorbitieModal)\r\n    }\r\n    const ReInfectionModal =()=> {\r\n      setReinfectionModal(!reInfectionModal)\r\n    }\r\n    const SignsSymptomsModal =()=> {\r\n      setSignsSymptomsModal(!signsSymptomsModal)\r\n    }\r\n    const ChronicMedicationModal =()=> {\r\n      setChronicMedicationModal(!chronicMedicationModal)\r\n    }\r\n    const MedicationModal =()=> {\r\n      setMedicationModal(!medicationModal)\r\n    }\r\n    const SupportiveCareModal =()=> {\r\n      setSupportiveCareModal(!supportiveCareModal)\r\n    }\r\n    useEffect(() => {\r\n        getVaccinationHistory()\r\n        getInclusionHistory()\r\n        getDemographicHistory()\r\n        getVitalsHistory()\r\n        getComobitieHistory()\r\n        getReinfectionHistory()\r\n        getSignsSymptomsHistory()\r\n        getChronicMedicationHistory()\r\n        getMedicationHistory()\r\n        getSupportiveCareHistory()\r\n    },[])\r\n    const getVaccinationHistory = (category) => {\r\n      axios\r\n        .get(`${baseUrl}covid/encounters/${patientObj.id}/VACCINATION_STATUS`,\r\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n        )\r\n        .then((response) => {\r\n            setVaccinationHistory(response.data)\r\n        })\r\n        .catch((error) => {    \r\n        }); \r\n        //return resultData\r\n    }\r\n    const getInclusionHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/INCLUSION_CRITERIA`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setInclusionHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getDemographicHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/DEMOGRAPHICS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setDemographicHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getVitalsHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/ADMISSION_VITAL_SIGNS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setVitalHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getComobitieHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/COMORBIDITIES`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setComobitieHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getReinfectionHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/REINFECTION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setReinfectionHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getChronicMedicationHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/CHRONIC_MEDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setChronicMedicationHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getSignsSymptomsHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/SIGNS_AND_SYMPTOMS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSignsSymptomsHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getMedicationHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/MEDICATION`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setMedicationHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n    const getSupportiveCareHistory = () => {\r\n        axios\r\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/SUPPORTIVE_CARE`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n            )\r\n            .then((response) => {\r\n                setSupportiveCareHistory(response.data)\r\n            })\r\n            .catch((error) => {\r\n            });\r\n        //return resultData\r\n    }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card >\r\n        <CardContent>\r\n       \r\n            {/* Sematic Ui Card */}\r\n            <Grid centered columns={2} padded>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                <Label as='a' color='blue'  ribbon>\r\n                        INCLUSION CRITERIA \r\n                        \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() =>loadInclusionCriteriaModal()}/>\r\n                    <List divided verticalAlign='middle'>\r\n                    {inclusionHistory!==\"\" && inclusionHistory.map((value) => (\r\n                          <>\r\n                            <List.Item>\r\n                              <List.Content floated='right'>\r\n                              <Label>\r\n                                View\r\n                              </Label>\r\n                              </List.Content>\r\n                              <Icon name='info circle'  />\r\n                                <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                            </List.Item>\r\n                          </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='orange' ribbon='left'>\r\n                        DEMOGRAPHICS \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => DemographicModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {demograhicHistory!==\"\" && demograhicHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                        </List.Item>\r\n                        </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='brown' ribbon>\r\n                    VACCINATION \r\n                    </Label>\r\n                        <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ViccinationModal()}/>\r\n                            <List divided verticalAlign='middle'>\r\n                                {vaccinationHistory!==\"\" && vaccinationHistory.map((value) => (\r\n                                    <>\r\n                                    <List.Item>\r\n                                    <List.Content floated='right'>\r\n                                <Label>\r\n                                View\r\n                                </Label>\r\n                                </List.Content>\r\n                                <Icon name='info circle'  />\r\n                                <List.Content>Date Vaccinated   {\"  \" +value.visit_date}</List.Content>\r\n                                </List.Item>\r\n                                </>\r\n                        ))\r\n                        }\r\n                        </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='pink' ribbon='left'>\r\n                        VITAL SIGNS \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => VitalSignModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                                {vitalHistory!==\"\" && vitalHistory.map((value) => (\r\n                                    <>\r\n                                    <List.Item>\r\n                                    <List.Content floated='right'>\r\n                                    <Label>\r\n                                    View\r\n                                    </Label>\r\n                                </List.Content>\r\n                                <Icon name='info circle'  />\r\n                                <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                                </List.Item>\r\n                                </>\r\n                            ))\r\n                            }\r\n                        </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='purple' ribbon>\r\n                    CO-MORBIDITIE\r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ComorbitieModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {comobitieHistory!==\"\" && comobitieHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                            </List.Item>\r\n                            </>\r\n                            ))\r\n                            }\r\n                        </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='violet' ribbon='left'>\r\n                    REINFECTION\r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ReInfectionModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {reinfectionHistory!==\"\" && reinfectionHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                        </List.Item>\r\n                        </>\r\n                        ))\r\n                        }\r\n                        </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='teal' ribbon>\r\n                    SIGNS AND SYMPTOMS\r\n                   \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => SignsSymptomsModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {signsSymptomsHistory!==\"\" && signsSymptomsHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                        </List.Item>\r\n                        </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='green' ribbon='left'>\r\n                    CHRONIC MEDICATION \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ChronicMedicationModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {chronicMedicationHistory!==\"\" && chronicMedicationHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                        </List.Item>\r\n                        </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                <Segment raised>\r\n                    <Label as='a' color='olive' ribbon>\r\n                    MEDICATION  \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => MedicationModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {medicationHistory!==\"\" && medicationHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                        </List.Item>\r\n                        </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n\r\n                <Grid.Column>\r\n                <Segment>\r\n                    <Label as='a' color='yellow' ribbon='left'>\r\n                    SUPPORTIVE CARE \r\n                    </Label>\r\n                    <Icon name='plus' size='small' className=\" float-end ms-1\"  style={{cursor: 'pointer'}} onClick={() => SupportiveCareModal()}/>\r\n                        <List divided verticalAlign='middle'>\r\n                            {supportiveCarenHistory!==\"\" && supportiveCarenHistory.map((value) => (\r\n                                <>\r\n                                <List.Item>\r\n                                <List.Content floated='right'>\r\n                            <Label>\r\n                            View\r\n                            </Label>\r\n                            </List.Content>\r\n                            <Icon name='info circle'  />\r\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\r\n                        </List.Item>\r\n                        </>\r\n                    ))\r\n                    }\r\n                    </List>\r\n                </Segment>\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n         </CardContent>\r\n      </Card>\r\n\r\n      <InclusionCriteria toggle={inclusionCriteriaToggle} showModal={inclusionCriteriaModal} patientObj={patientObj} getInclusionHistory={getInclusionHistory}/>\r\n      <Demographic toggle={demographicToggle} showModal={demographicModal} patientObj={patientObj} getDemographicHistory={getDemographicHistory}/>\r\n      <Viccination toggle={ViccinationToggle} showModal={viccinationModal} patientObj={patientObj} getVaccinationHistory={getVaccinationHistory}/>\r\n      <VitalSign toggle={VitalSignToggle} showModal={vitalSignModal} patientObj={patientObj} getVitalsHistory={getVitalsHistory}/>\r\n      <Comorbitie toggle={ComorbitieToggle} showModal={comorbitieModal} patientObj={patientObj} getComobitieHistory={getComobitieHistory}/>\r\n      <ReInfection toggle={ReinfectionToggle} showModal={reInfectionModal} patientObj={patientObj} getReinfectionHistory={getReinfectionHistory}/>\r\n      <ChronicMedication toggle={ChronicMedicationToggle} showModal={chronicMedicationModal} patientObj={patientObj} getChronicMedicationHistory={getChronicMedicationHistory}/>\r\n      <Medication toggle={MedicationToggle} showModal={medicationModal} patientObj={patientObj} getMedicationHistory={getMedicationHistory} />\r\n      <SignsSymptoms toggle={SignsSymptomsToggle} showModal={signsSymptomsModal} patientObj={patientObj} getSignsSymptomsHistory={getSignsSymptomsHistory}/>\r\n      <SupportiveCare toggle={SupportiveCareToggle} showModal={supportiveCareModal} patientObj={patientObj} getSupportiveCareHistory={getSupportiveCareHistory} />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default withStyles(styles)(AddmissionHome);\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\ICU\\ICUList.js",["483","484","485","486","487","488","489"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\DischargeDead\\DischargeDeathList.js",["490","491","492","493","494","495","496"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationList.js",["497","498","499","500","501","502","503"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Index.js",["504"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\DeletePatient.js",["505","506","507","508","509","510","511","512","513"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Transfer\\Transfer.js",["514","515","516","517","518","519"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\ViccinationStatus.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Bmi.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Height.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Vaccination\\AddViccination.js",["520","521","522","523","524","525","526"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\layouts\\PageTitle.js",[],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\SupportiveCare.js",["527","528","529","530"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\ChronicMedication.js",["531","532","533","534"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\SignsSymptons.js",["535","536","537","538"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Comorbitie.js",["539","540","541","542"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Vaccination.js",["543","544","545","546"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst Viccination = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/VACCINATION_STATUS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'VACCINATION_STATUS'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Patient Record Save Successful\");\r\n                  props.getVaccinationHistory()\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Vaccination Status\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Viccination;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Medication.js",["547","548","549","550"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\ReInfection.js",["551","552","553","554"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\VitalSign.js",["555","556","557","558"],"import React, {useState, useEffect} from 'react';\r\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\r\nimport MatButton from '@material-ui/core/Button'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport SaveIcon from '@material-ui/icons/Save'\r\nimport CancelIcon from '@material-ui/icons/Cancel'\r\n// import { Alert } from 'reactstrap';\r\n// import { Spinner } from 'reactstrap';\r\nimport axios from \"axios\";\r\nimport { toast} from \"react-toastify\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Modal, Button } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    } \r\n}))\r\n\r\nconst VitalSigns = (props) => {\r\n\r\n    const patientObj = props.patientObj;\r\n    let history = useHistory();\r\n    const classes = useStyles()\r\n    const [vaccination, setVaccination] = useState([])\r\n    const [values, setValues] = useState([]);\r\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\r\n    const [saving, setSaving] = useState(false);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/questions-by-category/ADMISSION_VITAL_SIGNS`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    \r\n                    setVaccination(response.data);\r\n                    //setValues(response.data)\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n        const handleInputChange = e => {\r\n            setValues ({...values,  [e.target.name]: e.target.value});\r\n          }\r\n          \r\n    /**** Submit Button Processing  */\r\n    const handleSubmit = (e) => {        \r\n        e.preventDefault();\r\n        const obj = (Object.entries(values).map(([key, value]) => ({\r\n            question_id: key,\r\n            answer: value,\r\n          })))\r\n          objValues.category= 'ADMISSION_VITAL_SIGNS'\r\n          objValues.patient_id= patientObj.id\r\n          objValues.questionAnswers =obj\r\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\r\n\r\n          setSaving(true);\r\n          axios.post(`${baseUrl}covid/encounters`,objValues,\r\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\r\n          \r\n          )\r\n              .then(response => {\r\n                  setSaving(false);\r\n                  toast.success(\"Record save successful\");\r\n                  props.getVitalsHistory()\r\n                  props.toggle()\r\n                  //history.push(\"/\")\r\n\r\n              })\r\n              .catch(error => {\r\n                  setSaving(false);\r\n                  toast.error(\"Something went wrong\");\r\n              });\r\n          \r\n    }\r\n\r\n  return (      \r\n      <div >\r\n         \r\n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\r\n              <Form >\r\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\r\n                 Admission Vital Signs\r\n                 <Button\r\n                    variant=\"\"\r\n                    className=\"btn-close\"\r\n                    onClick={props.toggle}\r\n                ></Button>\r\n            </Modal.Header>\r\n                <Modal.Body>\r\n                    \r\n                        <Card >\r\n                            <CardBody>\r\n                                <Row >\r\n                                   \r\n                                 \r\n                                        {vaccination.map((value) => (\r\n                                            <>\r\n                                                <div className=\"form-group mb-3 col-md-6\">\r\n                                                <FormGroup>\r\n                                                    <Label for=\"role\">{value.name}</Label>\r\n                                                    {value.datatype===\"date\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                            type=\"date\"\r\n                                                            name={value.id}\r\n                                                            id={value.id}\r\n                                                            //value={value.name}\r\n                                                            onChange={handleInputChange}\r\n                                                            required\r\n                                                            >\r\n                                                            \r\n                                                        </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"select\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        {value.datatype===\"checkbox\"?\r\n                                                        (\r\n                                                            <Input\r\n                                                                type=\"select\"\r\n                                                                name={value.id}\r\n                                                                id={value.id}\r\n                                                                //value={values.name}\r\n                                                                onChange={handleInputChange}\r\n                                                                required\r\n                                                                >\r\n                                                                <option value=\"\"> </option>\r\n                                                                {value.responses.map(({ name, id }) => (\r\n                                                                    <option key={id} value={id}>\r\n                                                                    {name}\r\n                                                                    </option>\r\n                                                                ))}\r\n                                                            </Input>\r\n                                                        )\r\n                                                            :\r\n                                                            \" \"\r\n                                                        }\r\n                                                        \r\n                                                        \r\n                                                </FormGroup>\r\n                                            \r\n                                            </div>\r\n                                            </>\r\n                                        \r\n                                        ))}\r\n                                        \r\n                                             \r\n                                  </Row>\r\n                                      <br/>\r\n                                      \r\n                                      <br/>\r\n                                      \r\n                                          <MatButton\r\n                                              type='submit'\r\n                                              variant='contained'\r\n                                              color='primary'\r\n                                              className={classes.button}\r\n                                              startIcon={<SaveIcon />}\r\n                                              onClick={handleSubmit}\r\n                                             \r\n                                          >   \r\n                                              Save \r\n                                          </MatButton>\r\n                                           \r\n                                          <MatButton\r\n                                              variant='contained'\r\n                                              color='default'\r\n                                             onClick={props.toggle}\r\n                                              className={classes.button}\r\n                                              startIcon={<CancelIcon />}\r\n                                          >\r\n                                              cancel\r\n                                          </MatButton>\r\n                            </CardBody>\r\n                        </Card> \r\n                    </Modal.Body>\r\n        \r\n                </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VitalSigns;\r\n","C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\Demograhic.js",["559","560","561","562"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Admission\\InclusionCriteria.js",["563","564","565","566"],"C:\\Users\\Mathew\\Documents\\PalladiumProject\\LamisPlus\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationHistory.js",["567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585"],"import React, { useEffect, useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport axios from \"axios\";\r\nimport { url as baseUrl } from \"./../../../api\";\r\nimport { token as token } from \"./../../../api\";\r\nimport { forwardRef } from 'react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Icon } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {  Card,CardBody,} from 'reactstrap';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {  toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n//import { useHistory } from \"react-router-dom\";\r\nimport { FaUserPlus } from \"react-icons/fa\";\r\nimport {FaSyringe, FaUserEdit, FaShare, FaTrash} from \"react-icons/fa\";\r\nimport { MdDashboard } from \"react-icons/md\";\r\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\r\nimport \"@reach/menu-button/styles.css\";\r\nimport { Label } from 'semantic-ui-react'\r\nimport Vaccination from './../Vaccination/AddViccination'\r\nimport Moment from \"moment\";\r\nimport momentLocalizer from \"react-widgets-moment\";\r\nimport moment from \"moment\";\r\nimport Transfer from './../Transfer/Transfer';\r\nimport DeletePatient from './../Patient/DeletePatient';\r\n//Dtate Picker package\r\nMoment.locale(\"en\");\r\nmomentLocalizer();\r\n\r\nconst tableIcons = {\r\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        margin: theme.spacing(20),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center'\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2)\r\n    },\r\n    cardBottom: {\r\n        marginBottom: 20\r\n    },\r\n    Select: {\r\n        height: 45,\r\n        width: 350\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    },\r\n\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1)\r\n        }\r\n    },\r\n    input: {\r\n        display: 'none'\r\n    },\r\n    error: {\r\n        color: \"#f85032\",\r\n        fontSize: \"11px\",\r\n    },\r\n    success: {\r\n        color: \"#4BB543 \",\r\n        fontSize: \"11px\",\r\n    }, \r\n}))\r\n\r\n\r\n\r\nconst PatientVaccinationHistory = (props) => {\r\n    \r\n    const [patientList, setPatientList] = useState([])\r\n    const [patientObj, setpatientObj] = useState([])\r\n    const [modal, setModal] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    const [transferModal, setTransferModal] = useState(false);\r\n    const Transfertoggle = () => setTransferModal(!transferModal);\r\n    const [deleteModal, setDeleteModal] = useState(false);\r\n    const Deletetoggle = () => setDeleteModal(!deleteModal);\r\n\r\n    useEffect(() => {\r\n        patients()\r\n      }, []);\r\n        ///GET LIST OF Patients\r\n        async function patients() {\r\n            axios\r\n                .get(`${baseUrl}covid/patients`,\r\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\r\n                )\r\n                .then((response) => {\r\n                    console.log(response.data)\r\n                    setPatientList(response.data);\r\n                })\r\n                .catch((error) => {    \r\n                });        \r\n        }\r\n    const calculate_age = dob => {\r\n        var today = new Date();\r\n        var dateParts = dob.split(\"-\");\r\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\r\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\r\n        var age_now = today.getFullYear() - birthDate.getFullYear();\r\n        var m = today.getMonth() - birthDate.getMonth();\r\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\r\n                    age_now--;\r\n                }\r\n            if (age_now === 0) {\r\n                    return m + \" month(s)\";\r\n                }\r\n                return age_now + \" year(s)\";\r\n        };\r\n\r\n    const loadVaccinationModal =(row)=> {\r\n        setpatientObj({...patientObj, ...row});\r\n            setModal(!modal)\r\n    }\r\n   \r\n    \r\n    const VaccinationStatusIcon = (patient)=>{\r\n        //patient.first_name + \" \"  + patient. last_name,\r\n        if(patient.vaccination_status===\"\"){\r\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }else {\r\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\r\n        }\r\n    }\r\n    const VaccinationStatus = (patient)=>{\r\n        //console.log(patient)\r\n        if(patient.vaccination_status===null){\r\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"1\"){\r\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\r\n        }else if(patient.vaccination_status===\"2\"){\r\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\r\n        }else {\r\n            return \"\"\r\n        }\r\n    }\r\n    const CurrentStatus = (currentStatus)=>{\r\n        if(currentStatus===\"4\"){\r\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\r\n        }else if(currentStatus===\"5\"){\r\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\r\n        }else if(currentStatus===\"6\"){\r\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\r\n        }else if(currentStatus===\"7\"){\r\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\r\n        }else {\r\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\r\n        }\r\n\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n       <Card>\r\n         <CardBody>\r\n\r\n         <Link to={\"register-patient\"} >\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className=\" float-end ms-2\"\r\n                startIcon={<FaUserPlus size=\"10\"/>}\r\n                onClick={() => loadVaccinationModal()}\r\n\r\n            >\r\n                <span style={{ textTransform: \"capitalize\" }}>New Vaccination</span>\r\n            </Button>\r\n            </Link>        \r\n        <br/><br/>\r\n       \r\n            <MaterialTable\r\n            icons={tableIcons}\r\n              title=\"Patient Vaccination History \"\r\n              columns={[\r\n              // { title: \" ID\", field: \"Id\" },\r\n                {\r\n                  title: \"Encounter Date\",\r\n                  field: \"date\",\r\n                },\r\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\r\n                { title: \"Status\", field: \"status\", filtering: false },        \r\n                { title: \"Actions\", field: \"actions\", filtering: false }, \r\n              ]}\r\n              data={ patientList.map((row) => ({\r\n                  //Id: manager.id,\r\n                   date: VaccinationStatusIcon(row),\r\n                    v_status: row.participant_id,\r\n                    status: row.participant_id,\r\n                   \r\n                    actions:\r\n            \r\n                    <div>\r\n                    <Menu>\r\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\r\n                          Actions <span aria-hidden>▾</span>\r\n                        </MenuButton>\r\n                            <MenuList style={{ color:\"#000000 !important\"}} >\r\n                                                           \r\n                                  <MenuItem style={{ color:\"#000 !important\"}}  >\r\n                                     \r\n                                        <FaShare size=\"15\"  />{\" \"}\r\n                                        <span style={{color: '#000'}}>View</span>\r\n                                                                    \r\n                                  </MenuItem>\r\n                                  \r\n                                 \r\n                                  \r\n                          </MenuList>\r\n                    </Menu>\r\n                  </div>\r\n                  \r\n                  }))}\r\n            \r\n                        options={{\r\n                          headerStyle: {\r\n                              //backgroundColor: \"#9F9FA5\",\r\n                              color: \"#000\",\r\n                          },\r\n                          searchFieldStyle: {\r\n                              width : '200%',\r\n                              margingLeft: '250px',\r\n                          },\r\n                          filtering: false,\r\n                          exportButton: false,\r\n                          searchFieldAlignment: 'left',\r\n                          pageSizeOptions:[10,20,100],\r\n                          pageSize:10,\r\n                          debounceInterval: 400\r\n                      }}\r\n            />\r\n    \r\n        </CardBody>\r\n       </Card>\r\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientVaccinationHistory;\r\n\r\n\r\n",{"ruleId":"586","severity":1,"message":"587","line":4,"column":41,"nodeType":"588","messageId":"589","endLine":4,"endColumn":47},{"ruleId":"586","severity":1,"message":"587","line":3,"column":19,"nodeType":"588","messageId":"589","endLine":3,"endColumn":25},{"ruleId":"590","replacedBy":"591"},{"ruleId":"592","replacedBy":"593"},{"ruleId":"590","replacedBy":"594"},{"ruleId":"592","replacedBy":"595"},{"ruleId":"586","severity":1,"message":"596","line":2,"column":10,"nodeType":"588","messageId":"589","endLine":2,"endColumn":20},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"601"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":68,"column":7,"nodeType":"588","messageId":"589","endLine":68,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":172,"column":101,"nodeType":"606","messageId":"607","endLine":172,"endColumn":119,"fix":"608"},{"ruleId":"604","severity":1,"message":"605","line":174,"column":99,"nodeType":"606","messageId":"607","endLine":174,"endColumn":117,"fix":"609"},{"ruleId":"604","severity":1,"message":"605","line":176,"column":100,"nodeType":"606","messageId":"607","endLine":176,"endColumn":118,"fix":"610"},{"ruleId":"604","severity":1,"message":"605","line":178,"column":98,"nodeType":"606","messageId":"607","endLine":178,"endColumn":116,"fix":"611"},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"612"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"613"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"614"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"615"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"616"},{"ruleId":"586","severity":1,"message":"617","line":2,"column":45,"nodeType":"588","messageId":"589","endLine":2,"endColumn":57},{"ruleId":"586","severity":1,"message":"618","line":3,"column":5,"nodeType":"588","messageId":"589","endLine":3,"endColumn":8},{"ruleId":"586","severity":1,"message":"619","line":11,"column":10,"nodeType":"588","messageId":"589","endLine":11,"endColumn":24},{"ruleId":"597","severity":1,"message":"598","line":13,"column":10,"nodeType":"599","messageId":"600","endLine":13,"endColumn":24,"fix":"620"},{"ruleId":"586","severity":1,"message":"621","line":54,"column":9,"nodeType":"588","messageId":"589","endLine":54,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":58,"column":23,"nodeType":"588","messageId":"589","endLine":58,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":59,"column":12,"nodeType":"588","messageId":"589","endLine":59,"endColumn":18},{"ruleId":"586","severity":1,"message":"624","line":2,"column":27,"nodeType":"588","messageId":"589","endLine":2,"endColumn":36},{"ruleId":"586","severity":1,"message":"617","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":15},{"ruleId":"597","severity":1,"message":"598","line":25,"column":10,"nodeType":"599","messageId":"600","endLine":25,"endColumn":24,"fix":"625"},{"ruleId":"586","severity":1,"message":"617","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":15},{"ruleId":"597","severity":1,"message":"598","line":25,"column":10,"nodeType":"599","messageId":"600","endLine":25,"endColumn":24,"fix":"626"},{"ruleId":"627","severity":1,"message":"628","line":58,"column":6,"nodeType":"629","endLine":58,"endColumn":41,"suggestions":"630"},{"ruleId":"586","severity":1,"message":"631","line":14,"column":10,"nodeType":"588","messageId":"589","endLine":14,"endColumn":14},{"ruleId":"586","severity":1,"message":"632","line":14,"column":16,"nodeType":"588","messageId":"589","endLine":14,"endColumn":20},{"ruleId":"586","severity":1,"message":"633","line":14,"column":29,"nodeType":"588","messageId":"589","endLine":14,"endColumn":36},{"ruleId":"586","severity":1,"message":"634","line":14,"column":38,"nodeType":"588","messageId":"589","endLine":14,"endColumn":42},{"ruleId":"597","severity":1,"message":"598","line":10,"column":10,"nodeType":"599","messageId":"600","endLine":10,"endColumn":24,"fix":"635"},{"ruleId":"586","severity":1,"message":"636","line":11,"column":45,"nodeType":"588","messageId":"589","endLine":11,"endColumn":51},{"ruleId":"586","severity":1,"message":"637","line":11,"column":53,"nodeType":"588","messageId":"589","endLine":11,"endColumn":58},{"ruleId":"586","severity":1,"message":"638","line":68,"column":24,"nodeType":"588","messageId":"589","endLine":68,"endColumn":37},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"639"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"640"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"641"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"642"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"643"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"644"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"586","severity":1,"message":"645","line":9,"column":8,"nodeType":"588","messageId":"589","endLine":9,"endColumn":25},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"646"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"647"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"648"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"649"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"650"},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"651"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"652"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"653"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"654"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"655"},{"ruleId":"586","severity":1,"message":"656","line":15,"column":8,"nodeType":"588","messageId":"589","endLine":15,"endColumn":14},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"657","line":58,"column":12,"nodeType":"588","messageId":"589","endLine":58,"endColumn":18},{"ruleId":"586","severity":1,"message":"658","line":58,"column":20,"nodeType":"588","messageId":"589","endLine":58,"endColumn":29},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"659"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"660"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"661"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"662"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"663"},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"664"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"665"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"666"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"667"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"668"},{"ruleId":"586","severity":1,"message":"669","line":2,"column":35,"nodeType":"588","messageId":"589","endLine":2,"endColumn":44},{"ruleId":"586","severity":1,"message":"670","line":2,"column":46,"nodeType":"588","messageId":"589","endLine":2,"endColumn":51},{"ruleId":"586","severity":1,"message":"671","line":2,"column":53,"nodeType":"588","messageId":"589","endLine":2,"endColumn":58},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"672"},{"ruleId":"586","severity":1,"message":"656","line":15,"column":8,"nodeType":"588","messageId":"589","endLine":15,"endColumn":14},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"673","line":57,"column":12,"nodeType":"588","messageId":"589","endLine":57,"endColumn":26},{"ruleId":"586","severity":1,"message":"623","line":59,"column":12,"nodeType":"588","messageId":"589","endLine":59,"endColumn":18},{"ruleId":"586","severity":1,"message":"674","line":78,"column":15,"nodeType":"588","messageId":"589","endLine":78,"endColumn":32},{"ruleId":"586","severity":1,"message":"675","line":4,"column":10,"nodeType":"588","messageId":"589","endLine":4,"endColumn":23},{"ruleId":"590","replacedBy":"676"},{"ruleId":"592","replacedBy":"677"},{"ruleId":"586","severity":1,"message":"587","line":3,"column":19,"nodeType":"588","messageId":"589","endLine":3,"endColumn":25},{"ruleId":"586","severity":1,"message":"596","line":2,"column":10,"nodeType":"588","messageId":"589","endLine":2,"endColumn":20},{"ruleId":"586","severity":1,"message":"617","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":15},{"ruleId":"597","severity":1,"message":"598","line":25,"column":10,"nodeType":"599","messageId":"600","endLine":25,"endColumn":24,"fix":"678"},{"ruleId":"627","severity":1,"message":"628","line":58,"column":6,"nodeType":"629","endLine":58,"endColumn":41,"suggestions":"679"},{"ruleId":"586","severity":1,"message":"624","line":2,"column":27,"nodeType":"588","messageId":"589","endLine":2,"endColumn":36},{"ruleId":"586","severity":1,"message":"617","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":15},{"ruleId":"597","severity":1,"message":"598","line":25,"column":10,"nodeType":"599","messageId":"600","endLine":25,"endColumn":24,"fix":"680"},{"ruleId":"681","severity":1,"message":"682","line":84,"column":21,"nodeType":"683","messageId":"684","endLine":85,"endColumn":18},{"ruleId":"681","severity":1,"message":"682","line":85,"column":66,"nodeType":"683","messageId":"684","endLine":86,"endColumn":18},{"ruleId":"681","severity":1,"message":"682","line":86,"column":62,"nodeType":"683","messageId":"684","endLine":87,"endColumn":20},{"ruleId":"681","severity":1,"message":"682","line":87,"column":48,"nodeType":"683","messageId":"684","endLine":88,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"685"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":68,"column":7,"nodeType":"588","messageId":"589","endLine":68,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":172,"column":101,"nodeType":"606","messageId":"607","endLine":172,"endColumn":119,"fix":"686"},{"ruleId":"604","severity":1,"message":"605","line":174,"column":99,"nodeType":"606","messageId":"607","endLine":174,"endColumn":117,"fix":"687"},{"ruleId":"604","severity":1,"message":"605","line":176,"column":100,"nodeType":"606","messageId":"607","endLine":176,"endColumn":118,"fix":"688"},{"ruleId":"604","severity":1,"message":"605","line":178,"column":98,"nodeType":"606","messageId":"607","endLine":178,"endColumn":116,"fix":"689"},{"ruleId":"586","severity":1,"message":"631","line":14,"column":10,"nodeType":"588","messageId":"589","endLine":14,"endColumn":14},{"ruleId":"586","severity":1,"message":"632","line":14,"column":16,"nodeType":"588","messageId":"589","endLine":14,"endColumn":20},{"ruleId":"586","severity":1,"message":"633","line":14,"column":29,"nodeType":"588","messageId":"589","endLine":14,"endColumn":36},{"ruleId":"586","severity":1,"message":"634","line":14,"column":38,"nodeType":"588","messageId":"589","endLine":14,"endColumn":42},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"690"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"691"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"692"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"693"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"694"},{"ruleId":"597","severity":1,"message":"598","line":10,"column":10,"nodeType":"599","messageId":"600","endLine":10,"endColumn":24,"fix":"695"},{"ruleId":"586","severity":1,"message":"636","line":11,"column":45,"nodeType":"588","messageId":"589","endLine":11,"endColumn":51},{"ruleId":"586","severity":1,"message":"637","line":11,"column":53,"nodeType":"588","messageId":"589","endLine":11,"endColumn":58},{"ruleId":"586","severity":1,"message":"696","line":62,"column":5,"nodeType":"588","messageId":"589","endLine":62,"endColumn":15},{"ruleId":"586","severity":1,"message":"638","line":68,"column":24,"nodeType":"588","messageId":"589","endLine":68,"endColumn":37},{"ruleId":"627","severity":1,"message":"697","line":141,"column":7,"nodeType":"629","endLine":141,"endColumn":9,"suggestions":"698"},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"699"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"700"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"701"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"702"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"703"},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"704"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"705"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"706"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"707"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"708"},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"709"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":67,"column":7,"nodeType":"588","messageId":"589","endLine":67,"endColumn":16},{"ruleId":"604","severity":1,"message":"605","line":164,"column":101,"nodeType":"606","messageId":"607","endLine":164,"endColumn":119,"fix":"710"},{"ruleId":"604","severity":1,"message":"605","line":166,"column":99,"nodeType":"606","messageId":"607","endLine":166,"endColumn":117,"fix":"711"},{"ruleId":"604","severity":1,"message":"605","line":168,"column":100,"nodeType":"606","messageId":"607","endLine":168,"endColumn":118,"fix":"712"},{"ruleId":"604","severity":1,"message":"605","line":170,"column":98,"nodeType":"606","messageId":"607","endLine":170,"endColumn":116,"fix":"713"},{"ruleId":"586","severity":1,"message":"645","line":9,"column":8,"nodeType":"588","messageId":"589","endLine":9,"endColumn":25},{"ruleId":"586","severity":1,"message":"669","line":2,"column":35,"nodeType":"588","messageId":"589","endLine":2,"endColumn":44},{"ruleId":"586","severity":1,"message":"670","line":2,"column":46,"nodeType":"588","messageId":"589","endLine":2,"endColumn":51},{"ruleId":"586","severity":1,"message":"671","line":2,"column":53,"nodeType":"588","messageId":"589","endLine":2,"endColumn":58},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"714"},{"ruleId":"586","severity":1,"message":"656","line":15,"column":8,"nodeType":"588","messageId":"589","endLine":15,"endColumn":14},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"673","line":57,"column":12,"nodeType":"588","messageId":"589","endLine":57,"endColumn":26},{"ruleId":"586","severity":1,"message":"623","line":59,"column":12,"nodeType":"588","messageId":"589","endLine":59,"endColumn":18},{"ruleId":"586","severity":1,"message":"674","line":78,"column":15,"nodeType":"588","messageId":"589","endLine":78,"endColumn":32},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"715"},{"ruleId":"586","severity":1,"message":"656","line":15,"column":8,"nodeType":"588","messageId":"589","endLine":15,"endColumn":14},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"657","line":58,"column":12,"nodeType":"588","messageId":"589","endLine":58,"endColumn":18},{"ruleId":"586","severity":1,"message":"658","line":58,"column":20,"nodeType":"588","messageId":"589","endLine":58,"endColumn":29},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"586","severity":1,"message":"617","line":2,"column":45,"nodeType":"588","messageId":"589","endLine":2,"endColumn":57},{"ruleId":"586","severity":1,"message":"618","line":3,"column":5,"nodeType":"588","messageId":"589","endLine":3,"endColumn":8},{"ruleId":"586","severity":1,"message":"619","line":11,"column":10,"nodeType":"588","messageId":"589","endLine":11,"endColumn":24},{"ruleId":"597","severity":1,"message":"598","line":13,"column":10,"nodeType":"599","messageId":"600","endLine":13,"endColumn":24,"fix":"716"},{"ruleId":"586","severity":1,"message":"621","line":56,"column":9,"nodeType":"588","messageId":"589","endLine":56,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":60,"column":23,"nodeType":"588","messageId":"589","endLine":60,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":61,"column":12,"nodeType":"588","messageId":"589","endLine":61,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"717"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"718"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"719"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"720"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"721"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"722"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"723"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"724"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"725"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":12,"column":10,"nodeType":"599","messageId":"600","endLine":12,"endColumn":24,"fix":"726"},{"ruleId":"586","severity":1,"message":"621","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"622","line":59,"column":23,"nodeType":"588","messageId":"589","endLine":59,"endColumn":35},{"ruleId":"586","severity":1,"message":"623","line":60,"column":12,"nodeType":"588","messageId":"589","endLine":60,"endColumn":18},{"ruleId":"597","severity":1,"message":"598","line":5,"column":10,"nodeType":"599","messageId":"600","endLine":5,"endColumn":24,"fix":"727"},{"ruleId":"586","severity":1,"message":"602","line":27,"column":11,"nodeType":"588","messageId":"589","endLine":27,"endColumn":16},{"ruleId":"586","severity":1,"message":"728","line":33,"column":9,"nodeType":"588","messageId":"589","endLine":33,"endColumn":18},{"ruleId":"586","severity":1,"message":"729","line":33,"column":20,"nodeType":"588","messageId":"589","endLine":33,"endColumn":30},{"ruleId":"586","severity":1,"message":"730","line":33,"column":41,"nodeType":"588","messageId":"589","endLine":33,"endColumn":48},{"ruleId":"586","severity":1,"message":"731","line":34,"column":10,"nodeType":"588","messageId":"589","endLine":34,"endColumn":21},{"ruleId":"586","severity":1,"message":"656","line":41,"column":8,"nodeType":"588","messageId":"589","endLine":41,"endColumn":14},{"ruleId":"586","severity":1,"message":"732","line":42,"column":8,"nodeType":"588","messageId":"589","endLine":42,"endColumn":16},{"ruleId":"586","severity":1,"message":"733","line":43,"column":8,"nodeType":"588","messageId":"589","endLine":43,"endColumn":21},{"ruleId":"586","severity":1,"message":"603","line":68,"column":7,"nodeType":"588","messageId":"589","endLine":68,"endColumn":16},{"ruleId":"586","severity":1,"message":"734","line":120,"column":11,"nodeType":"588","messageId":"589","endLine":120,"endColumn":25},{"ruleId":"586","severity":1,"message":"735","line":122,"column":11,"nodeType":"588","messageId":"589","endLine":122,"endColumn":23},{"ruleId":"586","severity":1,"message":"736","line":140,"column":11,"nodeType":"588","messageId":"589","endLine":140,"endColumn":24},{"ruleId":"604","severity":1,"message":"605","line":165,"column":101,"nodeType":"606","messageId":"607","endLine":165,"endColumn":119,"fix":"737"},{"ruleId":"604","severity":1,"message":"605","line":167,"column":99,"nodeType":"606","messageId":"607","endLine":167,"endColumn":117,"fix":"738"},{"ruleId":"604","severity":1,"message":"605","line":169,"column":100,"nodeType":"606","messageId":"607","endLine":169,"endColumn":118,"fix":"739"},{"ruleId":"604","severity":1,"message":"605","line":171,"column":98,"nodeType":"606","messageId":"607","endLine":171,"endColumn":116,"fix":"740"},{"ruleId":"586","severity":1,"message":"741","line":174,"column":11,"nodeType":"588","messageId":"589","endLine":174,"endColumn":28},{"ruleId":"586","severity":1,"message":"742","line":186,"column":11,"nodeType":"588","messageId":"589","endLine":186,"endColumn":24},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["743"],"no-negated-in-lhs",["744"],["743"],["744"],"'makeStyles' is defined but never used.","no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"745","text":"746"},"'toast' is defined but never used.","'useStyles' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property last_name.","MemberExpression","unexpectedWhitespace",{"range":"747","text":"748"},{"range":"749","text":"748"},{"range":"750","text":"748"},{"range":"751","text":"748"},{"range":"752","text":"746"},{"range":"753","text":"748"},{"range":"754","text":"748"},{"range":"755","text":"748"},{"range":"756","text":"748"},"'FormFeedback' is defined but never used.","'Col' is defined but never used.","'ToastContainer' is defined but never used.",{"range":"757","text":"746"},"'history' is assigned a value but never used.","'setObjValues' is assigned a value but never used.","'saving' is assigned a value but never used.","'useEffect' is defined but never used.",{"range":"758","text":"746"},{"range":"759","text":"746"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'patientObj'. Either include it or remove the dependency array.","ArrayExpression",["760"],"'Grid' is defined but never used.","'Step' is defined but never used.","'Segment' is defined but never used.","'Icon' is defined but never used.",{"range":"761","text":"746"},"'Button' is defined but never used.","'Image' is defined but never used.","'setpatientObj' is assigned a value but never used.",{"range":"762","text":"746"},{"range":"763","text":"746"},{"range":"764","text":"746"},{"range":"765","text":"746"},{"range":"766","text":"746"},{"range":"767","text":"746"},"'ViccinationStatus' is defined but never used.",{"range":"768","text":"746"},{"range":"769","text":"748"},{"range":"770","text":"748"},{"range":"771","text":"748"},{"range":"772","text":"748"},{"range":"773","text":"746"},{"range":"774","text":"746"},{"range":"775","text":"746"},{"range":"776","text":"746"},{"range":"777","text":"746"},"'moment' is defined but never used.","'values' is assigned a value but never used.","'setValues' is assigned a value but never used.",{"range":"778","text":"746"},{"range":"779","text":"748"},{"range":"780","text":"748"},{"range":"781","text":"748"},{"range":"782","text":"748"},{"range":"783","text":"746"},{"range":"784","text":"748"},{"range":"785","text":"748"},{"range":"786","text":"748"},{"range":"787","text":"748"},"'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.",{"range":"788","text":"746"},"'transferStatus' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'BrowserRouter' is defined but never used.",["743"],["744"],{"range":"789","text":"746"},["790"],{"range":"791","text":"746"},"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","putCommentInBraces",{"range":"792","text":"746"},{"range":"793","text":"748"},{"range":"794","text":"748"},{"range":"795","text":"748"},{"range":"796","text":"748"},{"range":"797","text":"746"},{"range":"798","text":"748"},{"range":"799","text":"748"},{"range":"800","text":"748"},{"range":"801","text":"748"},{"range":"802","text":"746"},"'resultData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getChronicMedicationHistory', 'getComobitieHistory', 'getDemographicHistory', 'getInclusionHistory', 'getMedicationHistory', 'getReinfectionHistory', 'getSignsSymptomsHistory', 'getSupportiveCareHistory', 'getVaccinationHistory', and 'getVitalsHistory'. Either include them or remove the dependency array.",["803"],{"range":"804","text":"746"},{"range":"805","text":"748"},{"range":"806","text":"748"},{"range":"807","text":"748"},{"range":"808","text":"748"},{"range":"809","text":"746"},{"range":"810","text":"748"},{"range":"811","text":"748"},{"range":"812","text":"748"},{"range":"813","text":"748"},{"range":"814","text":"746"},{"range":"815","text":"748"},{"range":"816","text":"748"},{"range":"817","text":"748"},{"range":"818","text":"748"},{"range":"819","text":"746"},{"range":"820","text":"746"},{"range":"821","text":"746"},{"range":"822","text":"746"},{"range":"823","text":"746"},{"range":"824","text":"746"},{"range":"825","text":"746"},{"range":"826","text":"746"},{"range":"827","text":"746"},{"range":"828","text":"746"},{"range":"829","text":"746"},{"range":"830","text":"746"},{"range":"831","text":"746"},{"range":"832","text":"746"},"'FaSyringe' is defined but never used.","'FaUserEdit' is defined but never used.","'FaTrash' is defined but never used.","'MdDashboard' is defined but never used.","'Transfer' is defined but never used.","'DeletePatient' is defined but never used.","'Transfertoggle' is assigned a value but never used.","'Deletetoggle' is assigned a value but never used.","'calculate_age' is assigned a value but never used.",{"range":"833","text":"748"},{"range":"834","text":"748"},{"range":"835","text":"748"},{"range":"836","text":"748"},"'VaccinationStatus' is assigned a value but never used.","'CurrentStatus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[184,198],"token",[6720,6722],".",[6897,6899],[7075,7077],[7215,7217],[184,198],[6434,6436],[6611,6613],[6789,6791],[6929,6931],[609,623],[920,934],[920,934],{"desc":"837","fix":"838"},[374,388],[544,558],[544,558],[544,558],[544,558],[544,558],[544,558],[184,198],[6429,6431],[6606,6608],[6784,6786],[6924,6926],[544,558],[544,558],[542,556],[544,558],[544,558],[184,198],[6429,6431],[6606,6608],[6784,6786],[6924,6926],[184,198],[6455,6457],[6632,6634],[6810,6812],[6950,6952],[544,558],[920,934],{"desc":"837","fix":"839"},[920,934],[184,198],[6720,6722],[6897,6899],[7075,7077],[7215,7217],[184,198],[6429,6431],[6606,6608],[6784,6786],[6924,6926],[374,388],{"desc":"840","fix":"841"},[184,198],[6429,6431],[6606,6608],[6784,6786],[6924,6926],[184,198],[6455,6457],[6632,6634],[6810,6812],[6950,6952],[184,198],[6434,6436],[6611,6613],[6789,6791],[6929,6931],[544,558],[544,558],[609,623],[544,558],[544,558],[544,558],[544,558],[544,558],[542,556],[544,558],[544,558],[544,558],[544,558],[184,198],[6465,6467],[6642,6644],[6820,6822],[6960,6962],"Update the dependencies array to be: [history.location.state.patientObj, patientObj]",{"range":"842","text":"843"},{"range":"844","text":"843"},"Update the dependencies array to be: [getChronicMedicationHistory, getComobitieHistory, getDemographicHistory, getInclusionHistory, getMedicationHistory, getReinfectionHistory, getSignsSymptomsHistory, getSupportiveCareHistory, getVaccinationHistory, getVitalsHistory]",{"range":"845","text":"846"},[1945,1980],"[history.location.state.patientObj, patientObj]",[1945,1980],[5693,5695],"[getChronicMedicationHistory, getComobitieHistory, getDemographicHistory, getInclusionHistory, getMedicationHistory, getReinfectionHistory, getSignsSymptomsHistory, getSupportiveCareHistory, getVaccinationHistory, getVitalsHistory]"]