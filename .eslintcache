[{"C:\\Development\\lamisplus_new\\covid-module\\src\\index.js":"1","C:\\Development\\lamisplus_new\\covid-module\\src\\App.js":"2","C:\\Development\\lamisplus_new\\covid-module\\src\\reportWebVitals.js":"3","C:\\Development\\lamisplus_new\\covid-module\\src\\context\\ThemeContext.js":"4","C:\\Development\\lamisplus_new\\covid-module\\src\\context\\ThemeDemo.js":"5","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Home.js":"6","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\EditPatient.js":"7","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\RegisterPatient.js":"8","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientDetail.js":"9","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientList.js":"10","C:\\Development\\lamisplus_new\\covid-module\\src\\api.js":"11","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientCard.js":"12","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\AddmissionHome.js":"13","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\AdmissionList.js":"14","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationList.js":"15","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\ICU\\ICUList.js":"16","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationHistory.js":"17","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\DischargeDead\\DischargeDeathList.js":"18","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Index.js":"19","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\DeletePatient.js":"20","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Vaccination\\AddViccination.js":"21","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Transfer\\Transfer.js":"22","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Height.js":"23","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Bmi.js":"24","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\ViccinationStatus.js":"25","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\layouts\\PageTitle.js":"26","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Medication.js":"27","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\SignsSymptons.js":"28","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\SupportiveCare.js":"29","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\ChronicMedication.js":"30","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\ReInfection.js":"31","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\VitalSign.js":"32","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Comorbitie.js":"33","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Vaccination.js":"34","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Demograhic.js":"35","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\InclusionCriteria.js":"36"},{"size":677,"mtime":1649926455000,"results":"37","hashOfConfig":"38"},{"size":1189,"mtime":1649926455000,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1649926455000,"results":"40","hashOfConfig":"38"},{"size":8947,"mtime":1649926455000,"results":"41","hashOfConfig":"38"},{"size":2920,"mtime":1649926455000,"results":"42","hashOfConfig":"38"},{"size":1875,"mtime":1649926455000,"results":"43","hashOfConfig":"38"},{"size":11973,"mtime":1649926455000,"results":"44","hashOfConfig":"38"},{"size":11706,"mtime":1649926455000,"results":"45","hashOfConfig":"38"},{"size":3492,"mtime":1649926455000,"results":"46","hashOfConfig":"38"},{"size":14481,"mtime":1649926455000,"results":"47","hashOfConfig":"38"},{"size":412,"mtime":1649926455000,"results":"48","hashOfConfig":"38"},{"size":8941,"mtime":1649926455000,"results":"49","hashOfConfig":"38"},{"size":22901,"mtime":1649926455000,"results":"50","hashOfConfig":"38"},{"size":13659,"mtime":1649926455000,"results":"51","hashOfConfig":"38"},{"size":13742,"mtime":1649926455000,"results":"52","hashOfConfig":"38"},{"size":13658,"mtime":1649926455000,"results":"53","hashOfConfig":"38"},{"size":11289,"mtime":1649926455000,"results":"54","hashOfConfig":"38"},{"size":13697,"mtime":1649926455000,"results":"55","hashOfConfig":"38"},{"size":2641,"mtime":1649926455000,"results":"56","hashOfConfig":"38"},{"size":5512,"mtime":1649926455000,"results":"57","hashOfConfig":"38"},{"size":13327,"mtime":1649926455000,"results":"58","hashOfConfig":"38"},{"size":6778,"mtime":1649926455000,"results":"59","hashOfConfig":"38"},{"size":1066,"mtime":1649926455000,"results":"60","hashOfConfig":"38"},{"size":1066,"mtime":1649926455000,"results":"61","hashOfConfig":"38"},{"size":1449,"mtime":1649926455000,"results":"62","hashOfConfig":"38"},{"size":527,"mtime":1649926455000,"results":"63","hashOfConfig":"38"},{"size":12079,"mtime":1649926455000,"results":"64","hashOfConfig":"38"},{"size":12116,"mtime":1649926455000,"results":"65","hashOfConfig":"38"},{"size":12102,"mtime":1649926455000,"results":"66","hashOfConfig":"38"},{"size":12128,"mtime":1649926455000,"results":"67","hashOfConfig":"38"},{"size":12074,"mtime":1649926455000,"results":"68","hashOfConfig":"38"},{"size":10995,"mtime":1649926455000,"results":"69","hashOfConfig":"38"},{"size":12076,"mtime":1649926455000,"results":"70","hashOfConfig":"38"},{"size":11001,"mtime":1649926455000,"results":"71","hashOfConfig":"38"},{"size":12089,"mtime":1649926455000,"results":"72","hashOfConfig":"38"},{"size":12118,"mtime":1649926455000,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},"1bmd00n",{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":5,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":5,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":1,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"146"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"152"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"173"},"C:\\Development\\lamisplus_new\\covid-module\\src\\index.js",["174"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter, MemoryRouter as Router,} from 'react-router-dom';\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport SimpleReactLightbox from \"simple-react-lightbox\";\nimport  ThemeContext  from \"./context/ThemeContext\"; \n\nReactDOM.render(\n\t<React.StrictMode>\n\n            <SimpleReactLightbox>\n                <Router basename='/'>\n                    <ThemeContext>\n                        <App />\n                    </ThemeContext>  \n                </Router>\n            </SimpleReactLightbox>\n\n\t</React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n","C:\\Development\\lamisplus_new\\covid-module\\src\\App.js",["175"],"import React from \"react\";\nimport {\n  MemoryRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"./vendor/bootstrap-select/dist/css/bootstrap-select.min.css\";\nimport \"./css/style.css\";\n\nimport RegisterPatient from './jsx/components/Patient/RegisterPatient'\nimport Home from './jsx/components/Home'\nimport EditPatient from './jsx/components/Patient/EditPatient'\nimport PatientDetail from './jsx/components/Patient/PatientDetail'\n\n\nexport default function App() {\n  return (\n\n      <div>\n      <ToastContainer />\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n         \n          <Route path=\"/register-patient\">\n            <RegisterPatient />\n          </Route>\n          <Route path=\"/patient-dashboard\">\n            <PatientDetail />\n          </Route>\n          <Route path=\"/edit-patient\">\n            <EditPatient />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        \n          \n        </Switch>\n      </div>\n \n  );\n}\n\n\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\reportWebVitals.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\context\\ThemeContext.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\context\\ThemeDemo.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Home.js",["176"],"import React, {useState, Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Row, Col, Card,  Tab, Tabs, } from \"react-bootstrap\";\nimport Dashboard from './Patient/PatientList'\nimport AdmissionList from './Admission/AdmissionList'\nimport ICUList from './ICU/ICUList'\nimport DischargeDeathList from './DischargeDead/DischargeDeathList'\nimport VaccinationList from './Vaccination/VaccinationList'\n\nconst divStyle = {\n  borderRadius: \"2px\",\n  fontSize: 14,\n};\n\nconst Home = () => {\n    const [key, setKey] = useState('home');\n\n\n  return (\n    <Fragment>\n     \n      <Row>\n       \n        <Col xl={12}>\n          <Card style={divStyle}>\n            \n            <Card.Body>\n              {/* <!-- Nav tabs --> */}\n              <div className=\"custom-tab-1\">\n                <Tabs\n                    id=\"controlled-tab-example\"\n                    activeKey={key}\n                    onSelect={(k) => setKey(k)}\n                    className=\"mb-3\"\n                    >\n                    <Tab eventKey=\"home\" title=\"Patients\">                   \n                      <Dashboard />\n                    </Tab>\n                    <Tab eventKey=\"vaccination\" title=\"Vaccination\">                   \n                      <VaccinationList />\n                    </Tab>\n                    <Tab eventKey=\"Admission\" title=\"Admission\">\n                      <AdmissionList />\n                    </Tab>\n                    <Tab eventKey=\"ICU\" title=\"ICU\">\n                      <ICUList />\n                    </Tab>\n                    <Tab eventKey=\"Discharge/Death\" title=\"Discharge/Death\">\n                      <DischargeDeathList />\n                    </Tab>\n                    </Tabs>\n\n\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n        \n      </Row>\n    </Fragment>\n  );\n};\n\nexport default Home;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\EditPatient.js",["177","178","179"],"import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport MatButton from \"@material-ui/core/Button\";\nimport {\n\n  FormGroup,\n  Input,\n  Label,\n  FormFeedback,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Spinner } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\n//import { FaArrowLeft } from \"react-icons/fa\";\nimport { TiArrowBack } from 'react-icons/ti'\nimport { url as baseUrl } from \"./../../../api\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { DateTimePicker } from \"react-widgets\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n      margin: theme.spacing(1)\n  },\n  error: {\n      color: \"#f85032\",\n      fontSize: \"12.8px\",\n  },\n}))\n\nconst EditPatient = (props) => {\n   \n  let history = useHistory();\n  const patientObj = history.location && history.location.state ? history.location.state.patientObj : {}\n  const classes = useStyles();\n\n  const [values, setValues] = useState(history.location && history.location.state ? history.location.state.patientObj : {});\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n\n  useEffect(() => {\n    setValues(patientObj)\n  }, [history.location.state.patientObj]);\n  const handleInputChange = e => {\n    setValues ({...values,  [e.target.name]: e.target.value});\n  }\n  console.log(values)\n      /*****  Validation */\n      const validate = () => {\n        let temp = { ...errors };\n        temp.dob = values.dob\n            ? \"\"\n            : \"this field is required\";\n            temp.first_name = values.first_name\n            ? \"\"\n            : \"this field is required\";\n            temp.last_name = values.last_name\n            ? \"\"\n            : \"this field is required\";\n            temp.gender = values.gender\n            ? \"\"\n            : \"this field is required\";\n            temp.participant_id = values.participant_id\n            ? \"\"\n            : \"this field is required\";\n            setErrors({\n                ...temp,\n            });\n            return Object.values(temp).every((x) => x === \"\");\n        };\n\n        const handleSubmit = (e) => {\n          console.log(values)\n          e.preventDefault();\n                if (validate()) {      \n                        setSaving(true);\n                        axios.post(`${baseUrl}covid/patients`,values,\n                         { headers: {\"Authorization\" : `Bearer ${token}`}},\n                        \n                        )\n                            .then(response => {\n                                setSaving(false);\n                                toast.success(\"Patient Register Successful\");\n                                history.push(\"/\")\n    \n                            })\n                            .catch(error => {\n                                setSaving(false);\n                                toast.error(\"Something went wrong\");\n                            });\n                };\n            }\n\n\n  return (\n    <>\n    <ToastContainer autoClose={3000} hideProgressBar />\n       \n        <Card className={classes.cardBottom}>\n        <CardContent>\n            <Link\n                  to ={{pathname: \"/\" }}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-right ms-1\"\n                startIcon={<TiArrowBack />}\n              >\n                <span style={{ textTransform: \"capitalize\" }}>Back </span>\n              </Button>\n            </Link>\n            <br />\n          \n          <br />\n      <ToastContainer autoClose={3000} hideProgressBar />\n      \n      <div className=\"col-xl-12 col-lg-12\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h5 className=\"card-title\">Basic Information </h5>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"basic-form\">\n                <form >\n                  <div className=\"row\">\n                \n                    <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"participant_id\">Patient ID * </Label>\n                          <Input\n                            type=\"text\"\n                            name=\"participant_id\"\n                            id=\"participant_id\"\n                            onChange={handleInputChange}\n                            value={values.participant_id}\n                            required\n                          />\n                          {errors.participant_id !==\"\" ? (\n                            <span className={classes.error}>{errors.participant_id}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                      <Label for=\"first_name\">First Name *</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"first_name\"\n                        id=\"first_name\"\n                        onChange={handleInputChange}\n                        value={values.first_name}\n                        required\n                      />\n                      {errors.first_name !==\"\" ? (\n                            <span className={classes.error}>{errors.first_name}</span>\n                        ) : \"\" }\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                      <Label >Middle Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"mid_name\"\n                        id=\"mid_name\"\n                        onChange={handleInputChange}\n                        value={values.mid_name}\n                        required\n                      />\n                      </FormGroup>\n                    </div>\n                    \n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                      <Label >Last Name *</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"last_name\"\n                        id=\"last_name\"\n                        onChange={handleInputChange}\n                        value={values.last_name}\n                        required\n                      />\n                      {errors.last_name !==\"\" ? (\n                            <span className={classes.error}>{errors.last_name}</span>\n                        ) : \"\" }\n                      </FormGroup>\n                    </div>\n                   </div>\n                   <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label >Date of Birth*</Label>\n                          <DateTimePicker\n                              time={false}\n                              name=\"dateRegistration\"\n                              id=\"dateRegistration\"\n                              value={values.regDate}\n                              onChange={value1 =>\n                                setValues({ ...values, dob: moment(value1).format(\"YYYY-MM-DD\") })\n                              }\n                              defaultValue={new Date(new Date(moment(values.dob, \"YYYY-MM-DD\").format(\"MM/DD/YYYY\") ))}\n                                  max={new Date()}\n                          />\n                              {values.dob ===\"Invalid date\" ? (\n                                  <span className={classes.error}>{\"This field is required\"}</span>\n                              ) : \"\" }\n                              {errors.dob !==\"\" ? (\n                            <span className={classes.error}>{errors.dob}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label >Gender *</Label>\n                          <Input\n                            type=\"select\"\n                            name=\"gender\"\n                            id=\"gender\"\n                            value={values.gender}\n                            onChange={handleInputChange}\n                            required\n                            >\n                              <option value=\"\"> Please Select</option>\n                            <option value=\"1\"> Male</option>\n                            <option value=\"2\"> Female</option>\n                        </Input>\n                        {errors.gender !==\"\" ? (\n                            <span className={classes.error}>{errors.gender}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    \n                    <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label >Phone Number *</Label>\n                          <Input\n                            type=\"number\"\n                            name=\"phone\"\n                            id=\"phone\"\n                            onChange={handleInputChange}\n                            value={values.phone}\n                            required\n                          />\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label >Address</Label>\n                          <Input\n                            type=\"textarea\"\n                            name=\"address\"\n                            id=\"address\"\n                            onChange={handleInputChange}\n                            value={values.address}\n                            required\n                          />\n                        </FormGroup>\n                    </div>\n                   </div>\n                \n                  {saving ? <Spinner /> : \"\"}\n              <br />\n             \n                <MatButton\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n                onClick={handleSubmit}\n              >\n                {!saving ? (\n                  <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                ) : (\n                  <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                )}\n              </MatButton>\n              <Link\n                  to ={{pathname: \"/\" }}\n              >\n              <MatButton\n                variant=\"contained\"\n                className={classes.button}\n                startIcon={<CancelIcon />}\n                \n              >\n                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n              </MatButton>\n              </Link>\n                </form>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n        </CardContent>\n        </Card>\n    </>\n  );\n};\n\n\n\nexport default EditPatient","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\RegisterPatient.js",["180","181","182"],"import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport MatButton from \"@material-ui/core/Button\";\nimport {\n\n  FormGroup,\n  Input,\n  Label,\n  FormFeedback,\n} from \"reactstrap\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { ToastContainer, toast} from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { Spinner } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\n//import { FaArrowLeft } from \"react-icons/fa\";\nimport { TiArrowBack } from 'react-icons/ti'\nimport { url as baseUrl } from \"./../../../api\";\nimport 'react-toastify/dist/ReactToastify.css';\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport \"react-widgets/dist/css/react-widgets.css\";\nimport { DateTimePicker } from \"react-widgets\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst useStyles = makeStyles(theme => ({\n  button: {\n      margin: theme.spacing(1)\n  },\n  error: {\n      color: \"#f85032\",\n      fontSize: \"12.8px\",\n  },\n}))\n\nconst UserRegistration = (props) => {\n  let history = useHistory();\n  const classes = useStyles();\n\n  const [values, setValues] = useState({address: \"\",dob: \"\",first_name: \"\",gender: \"\",last_name: \"\",mid_name: \"\",participant_id: \"\", phone: \"\",status:\"\" });\n  const [errors, setErrors] = useState({});\n  const [saving, setSaving] = useState(false);\n\n  const handleInputChange = e => {\n    setValues ({...values,  [e.target.name]: e.target.value});\n  }\n      /*****  Validation */\n      const validate = () => {\n        let temp = { ...errors };\n        temp.dob = values.dob\n            ? \"\"\n            : \"this field is required\";\n            temp.first_name = values.first_name\n            ? \"\"\n            : \"this field is required\";\n            temp.last_name = values.last_name\n            ? \"\"\n            : \"this field is required\";\n            temp.gender = values.gender\n            ? \"\"\n            : \"this field is required\";\n            temp.participant_id = values.participant_id\n            ? \"\"\n            : \"this field is required\";\n            setErrors({\n                ...temp,\n            });\n            return Object.values(temp).every((x) => x === \"\");\n        };\n\n        const handleSubmit = (e) => {\n          //console.log(values)\n          e.preventDefault();\n                if (validate()) {      \n                        setSaving(true);\n                        axios.post(`${baseUrl}covid/patients`,values,\n                         { headers: {\"Authorization\" : `Bearer ${token}`}},\n                        \n                        )\n                            .then(response => {\n                                setSaving(false);\n                                toast.success(\"Patient Register Successful\");\n                                history.push(\"/\")\n    \n                            })\n                            .catch(error => {\n                                setSaving(false);\n                                toast.error(\"Something went wrong\");\n                            });\n                };\n            }\n\n\n  return (\n    <>\n    <ToastContainer autoClose={3000} hideProgressBar />\n       \n        <Card className={classes.cardBottom}>\n        <CardContent>\n            <Link\n                  to ={{pathname: \"/\" }}\n            >\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<TiArrowBack />}\n              >\n                <span style={{ textTransform: \"capitalize\" }}>Back </span>\n              </Button>\n            </Link>\n            <br />\n          \n          <br />\n      <ToastContainer autoClose={3000} hideProgressBar />\n      \n      <div className=\"col-xl-12 col-lg-12\">\n          <div className=\"card\">\n            <div className=\"card-header\">\n              <h5 className=\"card-title\">Basic Information </h5>\n            </div>\n            <div className=\"card-body\">\n              <div className=\"basic-form\">\n                <form >\n                  <div className=\"row\">\n                \n                    <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label for=\"participant_id\">Patient ID * </Label>\n                          <Input\n                            type=\"text\"\n                            name=\"participant_id\"\n                            id=\"participant_id\"\n                            onChange={handleInputChange}\n                            value={values.participant_id}\n                            required\n                          />\n                          {errors.participant_id !==\"\" ? (\n                            <span className={classes.error}>{errors.participant_id}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                  </div>\n                  <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                      <Label for=\"first_name\">First Name *</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"first_name\"\n                        id=\"first_name\"\n                        onChange={handleInputChange}\n                        value={values.first_name}\n                        required\n                      />\n                      {errors.first_name !==\"\" ? (\n                            <span className={classes.error}>{errors.first_name}</span>\n                        ) : \"\" }\n                      </FormGroup>\n                    </div>\n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                      <Label >Middle Name</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"mid_name\"\n                        id=\"mid_name\"\n                        onChange={handleInputChange}\n                        value={values.mid_name}\n                        required\n                      />\n                      </FormGroup>\n                    </div>\n                    \n                    <div className=\"form-group mb-3 col-md-4\">\n                      <FormGroup>\n                      <Label >Last Name *</Label>\n                      <Input\n                        type=\"text\"\n                        name=\"last_name\"\n                        id=\"last_name\"\n                        onChange={handleInputChange}\n                        value={values.last_name}\n                        required\n                      />\n                      {errors.last_name !==\"\" ? (\n                            <span className={classes.error}>{errors.last_name}</span>\n                        ) : \"\" }\n                      </FormGroup>\n                    </div>\n                   </div>\n                   <div className=\"row\">\n                    <div className=\"form-group mb-3 col-md-4\">\n                        <FormGroup>\n                          <Label >Date of Birth*</Label>\n                          <DateTimePicker\n                              time={false}\n                              name=\"dateRegistration\"\n                              id=\"dateRegistration\"\n                              value={values.regDate}\n                              onChange={value1 =>\n                                setValues({ ...values, dob: moment(value1).format(\"YYYY-MM-DD\") })\n                              }\n                              \n                                  max={new Date()}\n                          />\n                              {values.dob ===\"Invalid date\" ? (\n                                  <span className={classes.error}>{\"This field is required\"}</span>\n                              ) : \"\" }\n                              {errors.dob !==\"\" ? (\n                            <span className={classes.error}>{errors.dob}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label >Gender *</Label>\n                          <Input\n                            type=\"select\"\n                            name=\"gender\"\n                            id=\"gender\"\n                            value={values.gender}\n                            onChange={handleInputChange}\n                            required\n                            >\n                              <option value=\"\"> Please Select</option>\n                            <option value=\"1\"> Male</option>\n                            <option value=\"2\"> Female</option>\n                        </Input>\n                        {errors.gender !==\"\" ? (\n                            <span className={classes.error}>{errors.gender}</span>\n                        ) : \"\" }\n                        </FormGroup>\n                    </div>\n                    \n                    <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label >Phone Number *</Label>\n                          <Input\n                            type=\"number\"\n                            name=\"phone\"\n                            id=\"phone\"\n                            onChange={handleInputChange}\n                            value={values.phone}\n                            required\n                          />\n                        </FormGroup>\n                    </div>\n                    <div className=\"form-group  col-md-4\">\n                        <FormGroup>\n                          <Label >Address</Label>\n                          <Input\n                            type=\"textarea\"\n                            name=\"address\"\n                            id=\"address\"\n                            onChange={handleInputChange}\n                            value={values.address}\n                            required\n                          />\n                        </FormGroup>\n                    </div>\n                   </div>\n                \n                  {saving ? <Spinner /> : \"\"}\n              <br />\n             \n                <MatButton\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n                onClick={handleSubmit}\n              >\n                {!saving ? (\n                  <span style={{ textTransform: \"capitalize\" }}>Save</span>\n                ) : (\n                  <span style={{ textTransform: \"capitalize\" }}>Saving...</span>\n                )}\n              </MatButton>\n              <Link\n                  to ={{pathname: \"/\" }}\n              >\n              <MatButton\n                variant=\"contained\"\n                className={classes.button}\n                startIcon={<CancelIcon />}\n                \n              >\n                <span style={{ textTransform: \"capitalize\" }}>Cancel</span>\n              </MatButton>\n              </Link>\n                </form>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n        </CardContent>\n        </Card>\n    </>\n  );\n};\n\n\n\nexport default UserRegistration","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientDetail.js",["183"],"import React,{useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom'\nimport ButtonMui from \"@material-ui/core/Button\";\nimport 'semantic-ui-css/semantic.min.css';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport PatientCardDetail from './PatientCard'\nimport { useHistory } from \"react-router-dom\";\nimport {   Tab, Tabs, } from \"react-bootstrap\";\nimport AddmissionHome from './../Admission/AddmissionHome';\nimport PatientChart from './../Patient/PatientChart/Index'\nimport PatientVaccinationHistory from './../Vaccination/VaccinationHistory'\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '20.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n});\n\n\nfunction PatientCard(props) {\n    let history = useHistory();\n    const [key, setKey] = useState('home');\n    const { classes } = props;\n    const patientObj = history.location && history.location.state ? history.location.state.patientObj : {}\n    //console.log(patientObj)\n  return (\n    <div className={classes.root}>\n      <Card >\n        <CardContent>\n        <Link to={\"/\"} >\n            <ButtonMui\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                //startIcon={<FaUserPlus size=\"10\"/>}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>Back</span>\n            </ButtonMui>\n            </Link>        \n            <br/><br/>\n            <div className=\"custom-tab-1\">\n            <Tabs\n              id=\"controlled-tab-example\"\n              activeKey={key}\n              onSelect={(k) => setKey(k)}\n              className=\"mb-3\"\n            >\n              <Tab eventKey=\"home\" title=\"Patient Chart\">\n                <PatientCardDetail patientObj={patientObj}/>\n                <PatientChart />\n              </Tab>\n               <Tab eventKey=\"Vaccination\" title=\"Vaccination\">\n              <PatientCardDetail patientObj={patientObj}/>\n                 {/* <PatientVaccinationHistory/> */}\n              </Tab>\n              <Tab eventKey=\"Addmission\" title=\"Admission\">\n              <PatientCardDetail patientObj={patientObj}/>\n                <AddmissionHome />\n              </Tab>\n              <Tab eventKey=\"Patient ICU\" title=\"Patient ICU\">\n              <PatientCardDetail patientObj={patientObj}/>\n                \n              </Tab>\n              <Tab eventKey=\"Discharge/Dead\" title=\"Discharge/Dead\">\n              <PatientCardDetail patientObj={patientObj}/>\n                \n              </Tab>\n              \n              \n            </Tabs>\n            </div>\n           \n            \n           \n          \n         </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientList.js",["184","185","186","187","188","189","190"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {  Card,CardBody,} from 'reactstrap';\nimport Button from \"@material-ui/core/Button\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport {FaSyringe, FaUserEdit, FaShare, FaTrash} from \"react-icons/fa\";\nimport { MdDashboard } from \"react-icons/md\";\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from 'semantic-ui-react'\nimport Vaccination from './../Vaccination/AddViccination'\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer';\nimport DeletePatient from './../Patient/DeletePatient';\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst Patients = (props) => {\n    \n    const [patientList, setPatientList] = useState([])\n    const [patientObj, setpatientObj] = useState([])\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n    const [deleteModal, setDeleteModal] = useState(false);\n    const Deletetoggle = () => setDeleteModal(!deleteModal);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patients`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    console.log(response.data)\n                    setPatientList(response.data);\n                })\n                .catch((error) => {    \n                });        \n        }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n        };\n\n    const loadVaccinationModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setModal(!modal)\n    }\n    const loadTransferModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setTransferModal(!transferModal)\n    }\n    const DeletePatientModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n        setDeleteModal(!deleteModal)\n    }\n    \n    const VaccinationStatusIcon = (patient)=>{\n        //patient.first_name + \" \"  + patient. last_name,\n        if(patient.vaccination_status===\"\"){\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else {\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }\n    }\n    const VaccinationStatus = (patient)=>{\n        //console.log(patient)\n        if(patient.vaccination_status===null){\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\n        }else {\n            return \"\"\n        }\n    }\n    const CurrentStatus = (currentStatus)=>{\n        if(currentStatus===\"4\"){\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\n        }else if(currentStatus===\"5\"){\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\n        }else if(currentStatus===\"6\"){\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\n        }else if(currentStatus===\"7\"){\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\n        }else {\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\n        }\n\n    }\n\n\n  return (\n    <div>\n       <Card>\n         <CardBody>\n\n         <Link to={\"register-patient\"} >\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<FaUserPlus size=\"10\"/>}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n            </Button>\n            </Link>        \n        <br/><br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Find Patient \"\n              columns={[\n              // { title: \" ID\", field: \"Id\" },\n                {\n                  title: \"Patient Name\",\n                  field: \"name\",\n                },\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n                { title: \"Address\", field: \"address\", filtering: false },\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\n                { title: \"DOB\", field: \"dob\", filtering: false },\n                { title: \"Age\", field: \"age\", filtering: false },\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\n                { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ patientList.map((row) => ({\n                  //Id: manager.id,\n                    name: VaccinationStatusIcon(row),\n                    hospital_number: row.participant_id,\n                    address: row.address,\n                    phone_number:  row.phone,\n                    dob:row.dob,\n                    age: (row.dob === 0 ||\n                        row.dob === undefined ||\n                        row.dob === null ||\n                        row.dob === \"\" )\n                          ? 0\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n                    v_status:  VaccinationStatus(row),\n                    status: CurrentStatus(row.current_status) \n                            ,\n                    actions:\n            \n                    <div>\n                    <Menu>\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\n                          Actions <span aria-hidden>▾</span>\n                        </MenuButton>\n                            <MenuList style={{ color:\"#000000 !important\"}} >\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \n                                    <Link\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\n                                  </Link>                               \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\n                                        <Link\n                                            to={{\n                                              pathname: \"/edit-patient\",\n                                              state: { patientObj: row  }\n                                            }}>\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \n                                      </Link>\n                                  </MenuItem>                                      \n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\n                                     \n                                        <FaShare size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Transfer</span>\n                                                                    \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\n                                     \n                                        <FaSyringe size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Vaccination</span>\n                                                                   \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => DeletePatientModal(row)}>\n                                     \n                                        <FaTrash size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Delete</span>\n                                                                   \n                                  </MenuItem>\n                                  \n                          </MenuList>\n                    </Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n    \n        </CardBody>\n       </Card>\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\n      <DeletePatient  toggle={Deletetoggle} showModal={deleteModal} patientObj={patientObj} loadPatients={patients}/>\n    </div>\n  );\n}\n\nexport default Patients;\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\api.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientCard.js",["191","192","193","194"],"import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n//import Chip from '@material-ui/core/Chip';\nimport Divider from '@material-ui/core/Divider';\nimport { Button } from 'semantic-ui-react';\nimport { Grid, Step, Label, Segment, Icon } from \"semantic-ui-react\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Col, Row } from \"reactstrap\";\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer'\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '20.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n});\n\nfunction PatientCard(props) {\n  const { classes } = props;\n  const patientObj = props.patientObj ? props.patientObj : {}\n  const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n    const calculate_age = dob => {\n    var today = new Date();\n    var dateParts = dob.split(\"-\");\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n    var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n    var age_now = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                age_now--;\n            }\n        if (age_now === 0) {\n                return m + \" month(s)\";\n            }\n            return age_now + \" year(s)\";\n    };\n    const loadTransferModal =()=> {\n      //setpatientObj({...patientObj, ...row});\n          setTransferModal(!transferModal)\n  }\n\n  const CurrentStatus = (currentStatus)=>{\n    if(currentStatus===\"4\"){\n        return (<Label color=\"blue\" size=\"mini\">Current Status: <b>Admitted</b></Label>);\n    }else if(currentStatus===\"5\"){\n        return (<Label color=\"olive\" size=\"mini\">Current Status: <b>ICU</b></Label>);\n    }else if(currentStatus===\"6\"){\n        return (<Label color=\"teal\" size=\"mini\">Current Status: <b>Discharge</b></Label>);\n    }else if(currentStatus===\"7\"){\n        return (<Label color=\"red\" size=\"mini\">Current Status: <b>Dead</b></Label>);\n    }else {\n        return   (<Label color=\"green\" size=\"mini\">Current Status: <b>Active</b></Label>);\n    }\n\n}\n\nconst VaccinationStatus = (patient)=>{\n    //console.log(patient)\n    if(patient.vaccination_status===null){\n        return (<><Label color=\"yellow\" size=\"mini\">Vaccination Status: Not Vaccinated</Label></> )\n    }else if(patient.vaccination_status===\"1\"){\n        return (<><Label color=\"teal\" size=\"mini\">Vaccination Status: Partially Vaccinated</Label></> )\n    }else if(patient.vaccination_status===\"2\"){\n        return (<><Label color=\"green\" size=\"mini\">Vaccination Status: Fully Vaccinated</Label></> )\n    }else {\n        return \"\"\n    }\n}\n\n  \n  return (\n    <div className={classes.root}>\n       <ExpansionPanel defaultExpanded>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                \n                <Row>\n                    \n                    <Col md={11}>\n                    <Row className={\"mt-1\"}>\n                    <Col md={12} className={classes.root2}>\n                        <b style={{fontSize: \"25px\"}}>\n                        {patientObj.first_name + \" \" + patientObj.last_name }\n                        </b>\n                        \n                    </Col>\n                    <Col md={4} className={classes.root2}>\n                    <span>\n                        {\" \"}\n                        Patient ID : <b>{patientObj.participant_id }</b>\n                    </span>\n                    </Col>\n\n                    <Col md={4} className={classes.root2}>\n                    <span>\n                        Date Of Birth : <b>{patientObj.dob }</b>\n                    </span>\n                    </Col>\n                    <Col md={4} className={classes.root2}>\n                    <span>\n                        {\" \"}\n                        Age : <b>{calculate_age(moment(patientObj.dob).format(\"YYYY-MM-DD\"))}</b>\n                    </span>\n                    </Col>\n                    <Col md={4}>\n                    <span>\n                        {\" \"}\n                        Gender :{\" \"}\n                        <b>{patientObj.gender===1?\"Male\": \"Female\" }</b>\n                    </span>\n                    </Col>\n                    <Col md={4} className={classes.root2}>\n                    <span>\n                        {\" \"}\n                        Phone Number : <b>{patientObj.phone }</b>\n                    </span>\n                    </Col>\n                    <Col md={4} className={classes.root2}>\n                    <span>\n                        {\" \"}\n                        Address : <b>{patientObj.address } </b>\n                    </span>\n                    </Col>\n\n                    <Col md={12}>\n                    {VaccinationStatus(patientObj)}\n                    {CurrentStatus(patientObj.current_status)}\n                    \n                    </Col>\n                    </Row>\n                    </Col>\n                </Row>\n            \n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.details}>\n                <div className={classes.column} >\n                    <Button\n                            color='red'\n                            content='BloodType'\n                            //icon='heart'\n                            label={{ basic: true, color: 'red', pointing: 'left', content: 'AB+' }}\n                            />\n                            \n                    </div>\n                <div className={classes.column}>\n                <Button\n                            basic\n                            color='blue'\n                            content='Height'\n                            icon='fork'\n                            label={{\n                                as: 'a',\n                                basic: true,\n                                color: 'blue',\n                                pointing: 'left',\n                                content: '74.5 in',\n                            }}\n                            />\n                </div>\n                <div className={classes.column}>\n                <Button\n                            basic\n                            color='blue'\n                            content='Weight'\n                            icon='fork'\n                            label={{\n                                as: 'a',\n                                basic: true,\n                                color: 'blue',\n                                pointing: 'left',\n                                content: '74.5 in',\n                            }}\n                            />\n                </div>\n                <div className={classNames(classes.column, classes.helper)}>\n                    <Typography variant=\"caption\">\n                    <Label color={\"blue\"} size={\"tiny\"} onClick={() => loadTransferModal()} style={{cursor:\"pointer\"}}>\n                        Transfer\n                        \n                    </Label>\n                   \n                    </Typography>\n                </div>\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions expandIcon={<ExpandMoreIcon />}>\n                \n                </ExpansionPanelActions>\n            </ExpansionPanel>\n            {/* <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj}/> */}\n            <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} />\n    </div>\n  );\n}\n\nPatientCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PatientCard);\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\AddmissionHome.js",["195","196","197","198","199","200"],"import React,{useState, useEffect} from 'react';\n//import PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n//import { Link } from 'react-router-dom'\n//import ButtonMui from \"@material-ui/core/Button\";\nimport 'semantic-ui-css/semantic.min.css';\nimport axios from \"axios\";\n\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { Grid,  Label, Segment, Icon, List, Button, Image } from \"semantic-ui-react\";\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport { useHistory } from \"react-router-dom\";\n//import {  Button } from \"react-bootstrap\";\nimport InclusionCriteria from './InclusionCriteria';\nimport Demographic from './Demograhic';\nimport Viccination from './Vaccination';\nimport  Comorbitie from './Comorbitie';\nimport  VitalSign from './VitalSign';\nimport  ReInfection from './ReInfection';\nimport ChronicMedication from './ChronicMedication';\nimport  Medication from './Medication';\nimport  SignsSymptoms from './SignsSymptons';\nimport  SupportiveCare from './SupportiveCare';\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: 'bottom',\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: 'center',\n  },\n  column: {\n    flexBasis: '20.33%',\n  },\n  helper: {\n    borderLeft: `2px solid ${theme.palette.divider}`,\n    padding: `${theme.spacing.unit}px ${theme.spacing.unit * 2}px`,\n  },\n  link: {\n    color: theme.palette.primary.main,\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n});\n\nlet resultData=\"\"\n\nfunction AddmissionHome(props) {\n    let history = useHistory();\n    const { classes } = props;\n    const patientObjValue = history.location && history.location.state ? history.location.state.patientObj : {}\n    const [patientObj, setpatientObj] = useState(patientObjValue)\n    const [inclusionCriteriaModal, setInclusionCriteriaModal] = useState(false);\n    const inclusionCriteriaToggle = () => setInclusionCriteriaModal(!inclusionCriteriaModal);\n    const [demographicModal, setDemographicModal] = useState(false);\n    const demographicToggle = () => setDemographicModal(!demographicModal);\n    const [viccinationModal, setViccinationModal] = useState(false);\n    const ViccinationToggle = () => setViccinationModal(!viccinationModal);\n    const [comorbitieModal, setComorbitieModal] = useState(false);\n    const ComorbitieToggle = () => setComorbitieModal(!comorbitieModal);\n    const [vitalSignModal, setVitalSignModal] = useState(false);\n    const VitalSignToggle = () => setVitalSignModal(!vitalSignModal);\n    const [reInfectionModal, setReinfectionModal] = useState(false);\n    const ReinfectionToggle = () => setReinfectionModal(!reInfectionModal);\n    const [signsSymptomsModal, setSignsSymptomsModal] = useState(false);\n    const SignsSymptomsToggle = () => setSignsSymptomsModal(!signsSymptomsModal);\n    const [medicationModal, setMedicationModal] = useState(false);\n    const MedicationToggle = () => setMedicationModal(!medicationModal);\n    const [chronicMedicationModal, setChronicMedicationModal] = useState(false);\n    const ChronicMedicationToggle = () => setChronicMedicationModal(!chronicMedicationModal);\n    const [supportiveCareModal, setSupportiveCareModal] = useState(false);\n    const SupportiveCareToggle = () => setSupportiveCareModal(!supportiveCareModal);\n    const [vaccinationHistory, setVaccinationHistory] = useState([])\n    const [inclusionHistory, setInclusionHistory] = useState([])\n    const [demograhicHistory, setDemographicHistory] = useState([])\n    const [vitalHistory, setVitalHistory] = useState([])\n    const [comobitieHistory, setComobitieHistory] = useState([])\n    const [reinfectionHistory, setReinfectionHistory] = useState([])\n    const [signsSymptomsHistory, setSignsSymptomsHistory] = useState([])\n    const [chronicMedicationHistory, setChronicMedicationHistory] = useState([])\n    const [medicationHistory, setMedicationHistory] = useState([])\n    const [supportiveCarenHistory, setSupportiveCareHistory] = useState([])\n\n    const loadInclusionCriteriaModal =()=> {\n          setInclusionCriteriaModal(!inclusionCriteriaModal)\n    }\n    const DemographicModal =()=> {\n      setDemographicModal(!demographicModal)\n    }\n    const ViccinationModal =()=> {\n      setViccinationModal(!viccinationModal)\n    }\n    const VitalSignModal =()=> {\n      setVitalSignModal(!vitalSignModal)\n    }\n    const ComorbitieModal =()=> {\n      setComorbitieModal(!comorbitieModal)\n    }\n    const ReInfectionModal =()=> {\n      setReinfectionModal(!reInfectionModal)\n    }\n    const SignsSymptomsModal =()=> {\n      setSignsSymptomsModal(!signsSymptomsModal)\n    }\n    const ChronicMedicationModal =()=> {\n      setChronicMedicationModal(!chronicMedicationModal)\n    }\n    const MedicationModal =()=> {\n      setMedicationModal(!medicationModal)\n    }\n    const SupportiveCareModal =()=> {\n      setSupportiveCareModal(!supportiveCareModal)\n    }\n    useEffect(() => {\n        getVaccinationHistory()\n        getInclusionHistory()\n        getDemographicHistory()\n        getVitalsHistory()\n        getComobitieHistory()\n        getReinfectionHistory()\n        getSignsSymptomsHistory()\n        getChronicMedicationHistory()\n        getMedicationHistory()\n        getSupportiveCareHistory()\n    },[])\n    const getVaccinationHistory = (category) => {\n      axios\n        .get(`${baseUrl}covid/encounters/${patientObj.id}/VACCINATION_STATUS`,\n        { headers: {\"Authorization\" : `Bearer ${token}`} }\n        )\n        .then((response) => {\n            setVaccinationHistory(response.data)\n        })\n        .catch((error) => {    \n        }); \n        //return resultData\n    }\n    const getInclusionHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/INCLUSION_CRITERIA`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setInclusionHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getDemographicHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/DEMOGRAPHICS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setDemographicHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getVitalsHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/ADMISSION_VITAL_SIGNS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setVitalHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getComobitieHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/COMORBIDITIES`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setComobitieHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getReinfectionHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/REINFECTION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setReinfectionHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getChronicMedicationHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/CHRONIC_MEDICATION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setChronicMedicationHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getSignsSymptomsHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/SIGNS_AND_SYMPTOMS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSignsSymptomsHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getMedicationHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/MEDICATION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setMedicationHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n    const getSupportiveCareHistory = () => {\n        axios\n            .get(`${baseUrl}covid/encounters/${patientObj.id}/SUPPORTIVE_CARE`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n            )\n            .then((response) => {\n                setSupportiveCareHistory(response.data)\n            })\n            .catch((error) => {\n            });\n        //return resultData\n    }\n\n  return (\n    <div className={classes.root}>\n      <Card >\n        <CardContent>\n       \n            {/* Sematic Ui Card */}\n            <Grid centered columns={2} padded>\n                <Grid.Column>\n                <Segment raised>\n                <Label as='a' color='blue'  ribbon>\n                        INCLUSION CRITERIA \n                        \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() =>loadInclusionCriteriaModal()}/>\n                    <List divided verticalAlign='middle'>\n                    {inclusionHistory!==\"\" && inclusionHistory.map((value) => (\n                          <>\n                            <List.Item>\n                              <List.Content floated='right'>\n                              <Label>\n                                View\n                              </Label>\n                              </List.Content>\n                              <Icon name='info circle'  />\n                                <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                            </List.Item>\n                          </>\n                    ))\n                    }\n                    </List>\n                </Segment>\n                </Grid.Column>\n\n                <Grid.Column>\n                <Segment>\n                    <Label as='a' color='orange' ribbon='left'>\n                        DEMOGRAPHICS \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => DemographicModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {demograhicHistory!==\"\" && demograhicHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                        </List.Item>\n                        </>\n                    ))\n                    }\n                    </List>\n                </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment raised>\n                    <Label as='a' color='brown' ribbon>\n                    VACCINATION \n                    </Label>\n                        <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ViccinationModal()}/>\n                            <List divided verticalAlign='middle'>\n                                {vaccinationHistory!==\"\" && vaccinationHistory.map((value) => (\n                                    <>\n                                    <List.Item>\n                                    <List.Content floated='right'>\n                                <Label>\n                                View\n                                </Label>\n                                </List.Content>\n                                <Icon name='info circle'  />\n                                <List.Content>Date Vaccinated   {\"  \" +value.visit_date}</List.Content>\n                                </List.Item>\n                                </>\n                        ))\n                        }\n                        </List>\n                </Segment>\n                </Grid.Column>\n\n                <Grid.Column>\n                <Segment>\n                    <Label as='a' color='pink' ribbon='left'>\n                        VITAL SIGNS \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => VitalSignModal()}/>\n                        <List divided verticalAlign='middle'>\n                                {vitalHistory!==\"\" && vitalHistory.map((value) => (\n                                    <>\n                                    <List.Item>\n                                    <List.Content floated='right'>\n                                    <Label>\n                                    View\n                                    </Label>\n                                </List.Content>\n                                <Icon name='info circle'  />\n                                <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                                </List.Item>\n                                </>\n                            ))\n                            }\n                        </List>\n                </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment raised>\n                    <Label as='a' color='purple' ribbon>\n                    CO-MORBIDITIE\n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ComorbitieModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {comobitieHistory!==\"\" && comobitieHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                            </List.Item>\n                            </>\n                            ))\n                            }\n                        </List>\n                </Segment>\n                </Grid.Column>\n\n                <Grid.Column>\n                <Segment>\n                    <Label as='a' color='violet' ribbon='left'>\n                    REINFECTION\n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ReInfectionModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {reinfectionHistory!==\"\" && reinfectionHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                        </List.Item>\n                        </>\n                        ))\n                        }\n                        </List>\n                </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment raised>\n                    <Label as='a' color='teal' ribbon>\n                    SIGNS AND SYMPTOMS\n                   \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => SignsSymptomsModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {signsSymptomsHistory!==\"\" && signsSymptomsHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                        </List.Item>\n                        </>\n                    ))\n                    }\n                    </List>\n                </Segment>\n                </Grid.Column>\n\n                <Grid.Column>\n                <Segment>\n                    <Label as='a' color='green' ribbon='left'>\n                    CHRONIC MEDICATION \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => ChronicMedicationModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {chronicMedicationHistory!==\"\" && chronicMedicationHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                        </List.Item>\n                        </>\n                    ))\n                    }\n                    </List>\n                </Segment>\n                </Grid.Column>\n                <Grid.Column>\n                <Segment raised>\n                    <Label as='a' color='olive' ribbon>\n                    MEDICATION  \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\" style={{cursor: 'pointer'}} onClick={() => MedicationModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {medicationHistory!==\"\" && medicationHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                        </List.Item>\n                        </>\n                    ))\n                    }\n                    </List>\n                </Segment>\n                </Grid.Column>\n\n                <Grid.Column>\n                <Segment>\n                    <Label as='a' color='yellow' ribbon='left'>\n                    SUPPORTIVE CARE \n                    </Label>\n                    <Icon name='plus' size='small' className=\" float-end ms-1\"  style={{cursor: 'pointer'}} onClick={() => SupportiveCareModal()}/>\n                        <List divided verticalAlign='middle'>\n                            {supportiveCarenHistory!==\"\" && supportiveCarenHistory.map((value) => (\n                                <>\n                                <List.Item>\n                                <List.Content floated='right'>\n                            <Label>\n                            View\n                            </Label>\n                            </List.Content>\n                            <Icon name='info circle'  />\n                            <List.Content>Encounter Date   {\"  \" +value.visit_date}</List.Content>\n                        </List.Item>\n                        </>\n                    ))\n                    }\n                    </List>\n                </Segment>\n                </Grid.Column>\n            </Grid>\n\n         </CardContent>\n      </Card>\n\n      <InclusionCriteria toggle={inclusionCriteriaToggle} showModal={inclusionCriteriaModal} patientObj={patientObj} getInclusionHistory={getInclusionHistory}/>\n      <Demographic toggle={demographicToggle} showModal={demographicModal} patientObj={patientObj} getDemographicHistory={getDemographicHistory}/>\n      <Viccination toggle={ViccinationToggle} showModal={viccinationModal} patientObj={patientObj} getVaccinationHistory={getVaccinationHistory}/>\n      <VitalSign toggle={VitalSignToggle} showModal={vitalSignModal} patientObj={patientObj} getVitalsHistory={getVitalsHistory}/>\n      <Comorbitie toggle={ComorbitieToggle} showModal={comorbitieModal} patientObj={patientObj} getComobitieHistory={getComobitieHistory}/>\n      <ReInfection toggle={ReinfectionToggle} showModal={reInfectionModal} patientObj={patientObj} getReinfectionHistory={getReinfectionHistory}/>\n      <ChronicMedication toggle={ChronicMedicationToggle} showModal={chronicMedicationModal} patientObj={patientObj} getChronicMedicationHistory={getChronicMedicationHistory}/>\n      <Medication toggle={MedicationToggle} showModal={medicationModal} patientObj={patientObj} getMedicationHistory={getMedicationHistory} />\n      <SignsSymptoms toggle={SignsSymptomsToggle} showModal={signsSymptomsModal} patientObj={patientObj} getSignsSymptomsHistory={getSignsSymptomsHistory}/>\n      <SupportiveCare toggle={SupportiveCareToggle} showModal={supportiveCareModal} patientObj={patientObj} getSupportiveCareHistory={getSupportiveCareHistory} />\n    </div>\n  );\n}\n\n\n\nexport default withStyles(styles)(AddmissionHome);\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\AdmissionList.js",["201","202","203","204","205","206","207"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {  Card,CardBody,} from 'reactstrap';\nimport Button from \"@material-ui/core/Button\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\nimport { MdDashboard } from \"react-icons/md\";\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from 'semantic-ui-react'\nimport Vaccination from './../Vaccination/AddViccination'\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer'\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst Patients = (props) => {\n    \n    const [patientList, setPatientList] = useState([])\n    const [patientObj, setpatientObj] = useState([])\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patients`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    //console.log(response.data)\n                    setPatientList(response.data.filter((x)=> x.current_status===\"4\"));\n                })\n                .catch((error) => {    \n                });        \n        }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n        };\n\n    const loadVaccinationModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setModal(!modal)\n    }\n    const loadTransferModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setTransferModal(!transferModal)\n    }\n    const VaccinationStatusIcon = (patient)=>{\n        //patient.first_name + \" \"  + patient. last_name,\n        if(patient.vaccination_status===\"\"){\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else {\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }\n    }\n    const VaccinationStatus = (patient)=>{\n        //console.log(patient)\n        if(patient.vaccination_status===null){\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\n        }else {\n            return \"\"\n        }\n    }\n    const CurrentStatus = (currentStatus)=>{\n        if(currentStatus===\"4\"){\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\n        }else if(currentStatus===\"5\"){\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\n        }else if(currentStatus===\"6\"){\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\n        }else if(currentStatus===\"7\"){\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\n        }else {\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\n        }\n\n    }\n\n   \n  return (\n    <div>\n       <Card>\n         <CardBody>\n\n         <Link to={\"register-patient\"} >\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<FaUserPlus size=\"10\"/>}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n            </Button>\n            </Link>        \n        <br/><br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Find Patient \"\n              columns={[\n              // { title: \" ID\", field: \"Id\" },\n                {\n                  title: \"Patient Name\",\n                  field: \"name\",\n                },\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n                { title: \"Address\", field: \"address\", filtering: false },\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\n                { title: \"DOB\", field: \"dob\", filtering: false },\n                { title: \"Age\", field: \"age\", filtering: false },\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\n                { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ patientList.map((row) => ({\n                  //Id: manager.id,\n                    name: VaccinationStatusIcon(row),\n                    hospital_number: row.participant_id,\n                    address: row.address,\n                    phone_number:  row.phone,\n                    dob:row.dob,\n                    age: (row.dob === 0 ||\n                        row.dob === undefined ||\n                        row.dob === null ||\n                        row.dob === \"\" )\n                          ? 0\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n                    v_status:  VaccinationStatus(row),\n                    status: CurrentStatus(row.current_status) \n                            ,\n                    actions:\n            \n                    <div>\n                    <Menu>\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\n                          Actions <span aria-hidden>▾</span>\n                        </MenuButton>\n                            <MenuList style={{ color:\"#000000 !important\"}} >\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \n                                    <Link\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\n                                  </Link>                               \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\n                                        <Link\n                                            to={{\n                                              pathname: \"/edit-patient\",\n                                              state: { patientObj: row  }\n                                            }}>\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \n                                      </Link>\n                                  </MenuItem>                                      \n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\n                                     \n                                        <FaShare size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Transfer</span>\n                                                                    \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\n                                     \n                                        <FaSyringe size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Vaccination</span>\n                                                                   \n                                  </MenuItem>\n                                  \n                          </MenuList>\n                    </Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n    \n        </CardBody>\n       </Card>\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\n    </div>\n  );\n}\n\nexport default Patients;\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationList.js",["208","209","210","211","212","213","214"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {  Card,CardBody,} from 'reactstrap';\nimport Button from \"@material-ui/core/Button\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\nimport { MdDashboard } from \"react-icons/md\";\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from 'semantic-ui-react'\nimport Vaccination from './../Vaccination/AddViccination'\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer'\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst Patients = (props) => {\n    \n    const [patientList, setPatientList] = useState([])\n    const [patientObj, setpatientObj] = useState([])\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patients`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    //console.log(response.data)\n                    setPatientList(response.data.filter((x)=> x.vaccination_status!==null));\n                })\n                .catch((error) => {    \n                });        \n        }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n        };\n\n    const loadVaccinationModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setModal(!modal)\n    }\n    const loadTransferModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setTransferModal(!transferModal)\n    }\n    const VaccinationStatusIcon = (patient)=>{\n        //patient.first_name + \" \"  + patient. last_name,\n        if(patient.vaccination_status===\"\"){\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else {\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }\n    }\n    const VaccinationStatus = (patient)=>{\n        //console.log(patient)\n        if(patient.vaccination_status===null){\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\n        }else {\n            return \"\"\n        }\n    }\n    const CurrentStatus = (currentStatus)=>{\n        if(currentStatus===\"4\"){\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\n        }else if(currentStatus===\"5\"){\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\n        }else if(currentStatus===\"6\"){\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\n        }else if(currentStatus===\"7\"){\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\n        }else {\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\n        }\n\n    }\n\n    console.log(patientList.filter((x)=> x.vaccination_status!==null))\n  return (\n    <div>\n       <Card>\n         <CardBody>\n\n         <Link to={\"register-patient\"} >\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<FaUserPlus size=\"10\"/>}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n            </Button>\n            </Link>        \n        <br/><br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Find Vaccinated Patient \"\n              columns={[\n              // { title: \" ID\", field: \"Id\" },\n                {\n                  title: \"Patient Name\",\n                  field: \"name\",\n                },\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n                { title: \"Address\", field: \"address\", filtering: false },\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\n                { title: \"DOB\", field: \"dob\", filtering: false },\n                { title: \"Age\", field: \"age\", filtering: false },\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\n                { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ patientList.map((row) => ({\n                  //Id: manager.id,\n                    name: VaccinationStatusIcon(row),\n                    hospital_number: row.participant_id,\n                    address: row.address,\n                    phone_number:  row.phone,\n                    dob:row.dob,\n                    age: (row.dob === 0 ||\n                        row.dob === undefined ||\n                        row.dob === null ||\n                        row.dob === \"\" )\n                          ? 0\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n                    v_status:  VaccinationStatus(row),\n                    status: CurrentStatus(row.current_status) \n                            ,\n                    actions:\n            \n                    <div>\n                    <Menu>\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\n                          Actions <span aria-hidden>▾</span>\n                        </MenuButton>\n                            <MenuList style={{ color:\"#000000 !important\"}} >\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \n                                    <Link\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\n                                  </Link>                               \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\n                                        <Link\n                                            to={{\n                                              pathname: \"/edit-patient\",\n                                              state: { patientObj: row  }\n                                            }}>\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \n                                      </Link>\n                                  </MenuItem>                                      \n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\n                                     \n                                        <FaShare size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Transfer</span>\n                                                                    \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\n                                     \n                                        <FaSyringe size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Vaccination</span>\n                                                                   \n                                  </MenuItem>\n                                  \n                          </MenuList>\n                    </Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n    \n        </CardBody>\n       </Card>\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\n    </div>\n  );\n}\n\nexport default Patients;\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\ICU\\ICUList.js",["215","216","217","218","219","220","221"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {  Card,CardBody,} from 'reactstrap';\nimport Button from \"@material-ui/core/Button\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\nimport { MdDashboard } from \"react-icons/md\";\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from 'semantic-ui-react'\nimport Vaccination from './../Vaccination/AddViccination'\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer'\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst Patients = (props) => {\n    \n    const [patientList, setPatientList] = useState([])\n    const [patientObj, setpatientObj] = useState([])\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patients`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    //console.log(response.data)\n                    setPatientList(response.data.filter((x)=> x.current_status===\"5\"));\n                })\n                .catch((error) => {    \n                });        \n        }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n        };\n\n    const loadVaccinationModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setModal(!modal)\n    }\n    const loadTransferModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setTransferModal(!transferModal)\n    }\n    const VaccinationStatusIcon = (patient)=>{\n        //patient.first_name + \" \"  + patient. last_name,\n        if(patient.vaccination_status===\"\"){\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else {\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }\n    }\n    const VaccinationStatus = (patient)=>{\n        //console.log(patient)\n        if(patient.vaccination_status===null){\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\n        }else {\n            return \"\"\n        }\n    }\n    const CurrentStatus = (currentStatus)=>{\n        if(currentStatus===\"4\"){\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\n        }else if(currentStatus===\"5\"){\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\n        }else if(currentStatus===\"6\"){\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\n        }else if(currentStatus===\"7\"){\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\n        }else {\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\n        }\n\n    }\n\n\n  return (\n    <div>\n       <Card>\n         <CardBody>\n\n         <Link to={\"register-patient\"} >\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<FaUserPlus size=\"10\"/>}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n            </Button>\n            </Link>        \n        <br/><br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Find ICU Patient \"\n              columns={[\n              // { title: \" ID\", field: \"Id\" },\n                {\n                  title: \"Patient Name\",\n                  field: \"name\",\n                },\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n                { title: \"Address\", field: \"address\", filtering: false },\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\n                { title: \"DOB\", field: \"dob\", filtering: false },\n                { title: \"Age\", field: \"age\", filtering: false },\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\n                { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ patientList.map((row) => ({\n                  //Id: manager.id,\n                    name: VaccinationStatusIcon(row),\n                    hospital_number: row.participant_id,\n                    address: row.address,\n                    phone_number:  row.phone,\n                    dob:row.dob,\n                    age: (row.dob === 0 ||\n                        row.dob === undefined ||\n                        row.dob === null ||\n                        row.dob === \"\" )\n                          ? 0\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n                    v_status:  VaccinationStatus(row),\n                    status: CurrentStatus(row.current_status) \n                            ,\n                    actions:\n            \n                    <div>\n                    <Menu>\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\n                          Actions <span aria-hidden>▾</span>\n                        </MenuButton>\n                            <MenuList style={{ color:\"#000000 !important\"}} >\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \n                                    <Link\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\n                                  </Link>                               \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\n                                        <Link\n                                            to={{\n                                              pathname: \"/edit-patient\",\n                                              state: { patientObj: row  }\n                                            }}>\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \n                                      </Link>\n                                  </MenuItem>                                      \n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\n                                     \n                                        <FaShare size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Transfer</span>\n                                                                    \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\n                                     \n                                        <FaSyringe size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Vaccination</span>\n                                                                   \n                                  </MenuItem>\n                                  \n                          </MenuList>\n                    </Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n    \n        </CardBody>\n       </Card>\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadVaccinationaModal={loadVaccinationModal}/>\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} />\n    </div>\n  );\n}\n\nexport default Patients;\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Vaccination\\VaccinationHistory.js",["222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {  Card,CardBody,} from 'reactstrap';\nimport Button from \"@material-ui/core/Button\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport {FaSyringe, FaUserEdit, FaShare, FaTrash} from \"react-icons/fa\";\nimport { MdDashboard } from \"react-icons/md\";\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from 'semantic-ui-react'\nimport Vaccination from './../Vaccination/AddViccination'\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer';\nimport DeletePatient from './../Patient/DeletePatient';\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst PatientVaccinationHistory = (props) => {\n    \n    const [patientList, setPatientList] = useState([])\n    const [patientObj, setpatientObj] = useState([])\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n    const [deleteModal, setDeleteModal] = useState(false);\n    const Deletetoggle = () => setDeleteModal(!deleteModal);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patients`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    console.log(response.data)\n                    setPatientList(response.data);\n                })\n                .catch((error) => {    \n                });        \n        }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n        };\n\n    const loadVaccinationModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setModal(!modal)\n    }\n   \n    \n    const VaccinationStatusIcon = (patient)=>{\n        //patient.first_name + \" \"  + patient. last_name,\n        if(patient.vaccination_status===\"\"){\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else {\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }\n    }\n    const VaccinationStatus = (patient)=>{\n        //console.log(patient)\n        if(patient.vaccination_status===null){\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\n        }else {\n            return \"\"\n        }\n    }\n    const CurrentStatus = (currentStatus)=>{\n        if(currentStatus===\"4\"){\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\n        }else if(currentStatus===\"5\"){\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\n        }else if(currentStatus===\"6\"){\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\n        }else if(currentStatus===\"7\"){\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\n        }else {\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\n        }\n\n    }\n\n\n  return (\n    <div>\n       <Card>\n         <CardBody>\n\n         <Link to={\"register-patient\"} >\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<FaUserPlus size=\"10\"/>}\n                onClick={() => loadVaccinationModal()}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>New Vaccination</span>\n            </Button>\n            </Link>        \n        <br/><br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Patient Vaccination History \"\n              columns={[\n              // { title: \" ID\", field: \"Id\" },\n                {\n                  title: \"Encounter Date\",\n                  field: \"date\",\n                },\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\n                { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ patientList.map((row) => ({\n                  //Id: manager.id,\n                   date: VaccinationStatusIcon(row),\n                    v_status: row.participant_id,\n                    status: row.participant_id,\n                   \n                    actions:\n            \n                    <div>\n                    <Menu>\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\n                          Actions <span aria-hidden>▾</span>\n                        </MenuButton>\n                            <MenuList style={{ color:\"#000000 !important\"}} >\n                                                           \n                                  <MenuItem style={{ color:\"#000 !important\"}}  >\n                                     \n                                        <FaShare size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>View</span>\n                                                                    \n                                  </MenuItem>\n                                  \n                                 \n                                  \n                          </MenuList>\n                    </Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n    \n        </CardBody>\n       </Card>\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\n      \n    </div>\n  );\n}\n\nexport default PatientVaccinationHistory;\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\DischargeDead\\DischargeDeathList.js",["241","242","243","244","245","246","247"],"import React, { useEffect, useState } from 'react'\nimport MaterialTable from 'material-table';\nimport axios from \"axios\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { forwardRef } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Icon } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport {  Card,CardBody,} from 'reactstrap';\nimport Button from \"@material-ui/core/Button\";\nimport {  toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport { makeStyles } from '@material-ui/core/styles'\n//import { useHistory } from \"react-router-dom\";\nimport { FaUserPlus } from \"react-icons/fa\";\nimport {FaSyringe, FaUserEdit, FaShare} from \"react-icons/fa\";\nimport { MdDashboard } from \"react-icons/md\";\nimport {Menu,MenuList,MenuButton,MenuItem,} from \"@reach/menu-button\";\nimport \"@reach/menu-button/styles.css\";\nimport { Label } from 'semantic-ui-react'\nimport Vaccination from './../Vaccination/AddViccination'\nimport Moment from \"moment\";\nimport momentLocalizer from \"react-widgets-moment\";\nimport moment from \"moment\";\nimport Transfer from './../Transfer/Transfer'\n//Dtate Picker package\nMoment.locale(\"en\");\nmomentLocalizer();\n\nconst tableIcons = {\nAdd: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\nCheck: forwardRef((props, ref) => <Check {...props} ref={ref} />),\nClear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nDelete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\nDetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nEdit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\nExport: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\nFilter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\nFirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\nLastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\nNextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\nPreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\nResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\nSearch: forwardRef((props, ref) => <Search {...props} ref={ref} />),\nSortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\nThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\nViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    },\n    error: {\n        color: \"#f85032\",\n        fontSize: \"11px\",\n    },\n    success: {\n        color: \"#4BB543 \",\n        fontSize: \"11px\",\n    }, \n}))\n\n\n\nconst Patients = (props) => {\n    \n    const [patientList, setPatientList] = useState([])\n    const [patientObj, setpatientObj] = useState([])\n    const [modal, setModal] = useState(false);\n    const toggle = () => setModal(!modal);\n    const [transferModal, setTransferModal] = useState(false);\n    const Transfertoggle = () => setTransferModal(!transferModal);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patients`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    //console.log(response.data)\n                    setPatientList(response.data.filter((x)=> x.current_status===\"7\" || x.current_status===\"6\"));\n                })\n                .catch((error) => {    \n                });        \n        }\n    const calculate_age = dob => {\n        var today = new Date();\n        var dateParts = dob.split(\"-\");\n        var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n        var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n        var age_now = today.getFullYear() - birthDate.getFullYear();\n        var m = today.getMonth() - birthDate.getMonth();\n            if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                    age_now--;\n                }\n            if (age_now === 0) {\n                    return m + \" month(s)\";\n                }\n                return age_now + \" year(s)\";\n        };\n\n    const loadVaccinationModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setModal(!modal)\n    }\n    const loadTransferModal =(row)=> {\n        setpatientObj({...patientObj, ...row});\n            setTransferModal(!transferModal)\n    }\n    const VaccinationStatusIcon = (patient)=>{\n        //patient.first_name + \" \"  + patient. last_name,\n        if(patient.vaccination_status===\"\"){\n            return (<><Icon name='dot circle outline' color=\"yellow\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Icon name='dot circle outline' color=\"blue\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Icon name='dot circle outline' color=\"green\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }else {\n            return (<><Icon name='dot circle outline' color=\"red\"/>{ patient.first_name + \" \"  + patient. last_name}</> )\n        }\n    }\n    const VaccinationStatus = (patient)=>{\n        //console.log(patient)\n        if(patient.vaccination_status===null){\n            return (<><Label color=\"yellow\" size=\"mini\">Not Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"1\"){\n            return (<><Label color=\"teal\" size=\"mini\">Parlly Vaccinated</Label></> )\n        }else if(patient.vaccination_status===\"2\"){\n            return (<><Label color=\"green\" size=\"mini\">Fully Vaccinated</Label></> )\n        }else {\n            return \"\"\n        }\n    }\n    const CurrentStatus = (currentStatus)=>{\n        if(currentStatus===\"4\"){\n            return (<Label color=\"blue\" size=\"mini\">admitted</Label>);\n        }else if(currentStatus===\"5\"){\n            return (<Label color=\"olive\" size=\"mini\">ICU</Label>);\n        }else if(currentStatus===\"6\"){\n            return (<Label color=\"teal\" size=\"mini\">Discharge</Label>);\n        }else if(currentStatus===\"7\"){\n            return (<Label color=\"red\" size=\"mini\">Dead</Label>);\n        }else {\n            return   (<Label color=\"green\" size=\"mini\">Active</Label>);\n        }\n\n    }\n\n\n  return (\n    <div>\n       <Card>\n         <CardBody>\n\n         <Link to={\"register-patient\"} >\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className=\" float-end ms-2\"\n                startIcon={<FaUserPlus size=\"10\"/>}\n\n            >\n                <span style={{ textTransform: \"capitalize\" }}>New Patient</span>\n            </Button>\n            </Link>        \n        <br/><br/>\n       \n            <MaterialTable\n            icons={tableIcons}\n              title=\"Find Discharge/Dead Patient \"\n              columns={[\n              // { title: \" ID\", field: \"Id\" },\n                {\n                  title: \"Patient Name\",\n                  field: \"name\",\n                },\n                { title: \"Hospital Number\", field: \"hospital_number\", filtering: false },\n                { title: \"Address\", field: \"address\", filtering: false },\n                { title: \"Phone Number\", field: \"phone_number\", filtering: false },\n                { title: \"DOB\", field: \"dob\", filtering: false },\n                { title: \"Age\", field: \"age\", filtering: false },\n                { title: \"Vaccination Status\", field: \"v_status\", filtering: false },\n                { title: \"Status\", field: \"status\", filtering: false },        \n                { title: \"Actions\", field: \"actions\", filtering: false }, \n              ]}\n              data={ patientList.map((row) => ({\n                  //Id: manager.id,\n                    name: VaccinationStatusIcon(row),\n                    hospital_number: row.participant_id,\n                    address: row.address,\n                    phone_number:  row.phone,\n                    dob:row.dob,\n                    age: (row.dob === 0 ||\n                        row.dob === undefined ||\n                        row.dob === null ||\n                        row.dob === \"\" )\n                          ? 0\n                          : calculate_age(moment(row.dob).format(\"DD-MM-YYYY\")),\n                    v_status:  VaccinationStatus(row),\n                    status: CurrentStatus(row.current_status) \n                            ,\n                    actions:\n            \n                    <div>\n                    <Menu>\n                        <MenuButton style={{ backgroundColor:\"#3F51B5\", color:\"#fff\", border:\"2px solid #3F51B5\", borderRadius:\"4px\", }}>\n                          Actions <span aria-hidden>▾</span>\n                        </MenuButton>\n                            <MenuList style={{ color:\"#000000 !important\"}} >\n                                <MenuItem  style={{ color:\"#000 !important\"}}>                      \n                                    <Link\n                                        to={{pathname: \"/patient-dashboard\", state: { patientObj: row  }}}>\n                                        <MdDashboard size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Patient Dashboard</span>\n                                  </Link>                               \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}}>\n                                        <Link\n                                            to={{\n                                              pathname: \"/edit-patient\",\n                                              state: { patientObj: row  }\n                                            }}>\n                                        <FaUserEdit size=\"15\" color=\"black\" />{\" \"}<span style={{color: '#000'}}>Edit Patient</span>                   \n                                      </Link>\n                                  </MenuItem>                                      \n                                  <MenuItem style={{ color:\"#000 !important\"}}  onClick={() => loadTransferModal(row)}>\n                                     \n                                        <FaShare size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Transfer</span>\n                                                                    \n                                  </MenuItem>\n                                  <MenuItem style={{ color:\"#000 !important\"}} onClick={() => loadVaccinationModal(row)}>\n                                     \n                                        <FaSyringe size=\"15\"  />{\" \"}\n                                        <span style={{color: '#000'}}>Vaccination</span>\n                                                                   \n                                  </MenuItem>\n                                  \n                          </MenuList>\n                    </Menu>\n                  </div>\n                  \n                  }))}\n            \n                        options={{\n                          headerStyle: {\n                              //backgroundColor: \"#9F9FA5\",\n                              color: \"#000\",\n                          },\n                          searchFieldStyle: {\n                              width : '200%',\n                              margingLeft: '250px',\n                          },\n                          filtering: false,\n                          exportButton: false,\n                          searchFieldAlignment: 'left',\n                          pageSizeOptions:[10,20,100],\n                          pageSize:10,\n                          debounceInterval: 400\n                      }}\n            />\n    \n        </CardBody>\n       </Card>\n      <Vaccination toggle={toggle} showModal={modal} patientObj={patientObj} loadPatients={patients}/>\n      <Transfer  toggle={Transfertoggle} showModal={transferModal} patientObj={patientObj} loadPatients={patients}/>\n    </div>\n  );\n}\n\nexport default Patients;\n\n\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Index.js",["248","249"],"import React from \"react\";\n// import { Link } from 'react-router-dom';\nimport { Row, Col, Card } from \"react-bootstrap\";\n\nimport PageTitle from \"../../../layouts/PageTitle\";\n\nimport Bmi from \"./Bmi\";\nimport Height from \"./Height\";\nimport ViccinationStatus from \"./ViccinationStatus\";\n//import LegendEffectOpacity from \"./LegendEffectOpacity\";\n\nfunction RechartJs() {\n  return (\n    <>\n\n      <Row>\n        <Col xl={4} lg={4}>\n          <Card>            \n            <Card.Body>\n                <p>Blood presure(7)                    \n                    <span className=\"float-end text-success\">Normal</span>\n                </p>\n                <p><h5>125/85mm/hg</h5></p>                \n              <Bmi />\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xl={4} lg={4}>\n          <Card>           \n            <Card.Body>\n            <p>Heart Rate(12)                    \n                    <span className=\"float-end text-success\">Normal</span>\n                </p>\n                <p><h5>85 per min</h5></p>\n              <Height />\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xl={4} lg={4}>\n          <Card>            \n            <Card.Body>\n            <p>Oxygen Sat.(2)                    \n                    <span className=\"float-end text-danger\">Below Normal</span>\n                </p>\n                <p><h5>81%</h5></p>\n                <Height />\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col xl={4} lg={4}>\n          <Card>            \n            <Card.Body>\n                <p>BMI Status(8)                    \n                    <span className=\"float-end text-danger\">Overweight</span>\n                </p>\n                <p><h5>25.4</h5></p>                \n              <Bmi />\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xl={4} lg={4}>\n          <Card>           \n            <Card.Body>\n            <p>Temperature(4)                    \n                    <span className=\"float-end text-success\">Normal</span>\n                </p>\n                <p><h5>97.00<sup>o</sup>F (36<sup>o</sup>C)</h5></p>\n              <Height />\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xl={4} lg={4}>\n          <Card>            \n            <Card.Body>\n            <p>Respiration(1)                    \n                    <span className=\"float-end text-success\"> Normal</span>\n                </p>\n                <p><h5>22 per min</h5></p>\n                <Height />\n            </Card.Body>\n          </Card>\n        </Col>\n        \n      </Row>\n    </>\n  );\n}\n\nexport default RechartJs;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\DeletePatient.js",["250","251","252","253","254","255","256","257","258"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst VitalSigns = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [transferStatus, setTransferStatus] = useState([])\n    const [objValues, setObjValues] = useState({patient_id: \"\",current_status:\"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patientstatus/current-status-codeset`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setTransferStatus(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        \n          objValues.patient_id= patientObj.id\n\n          setSaving(true);\n          axios.delete(`${baseUrl}covid/patients/${patientObj.id}`,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient delete successful\");\n                  props.toggle()\n                  props.loadPatients()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Delete Patient - <b>{patientObj.first_name + \" \" + patientObj.last_name }</b>\n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                    <p><b>Are you sure want to delete</b></p>\n                                </Row>                                    \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default VitalSigns;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Vaccination\\AddViccination.js",["259","260","261","262","263","264","265"],"import React, {useState, useEffect} from 'react';\nimport { Modal, ModalHeader, ModalBody,Form,FormFeedback,\nRow,Col, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { ToastContainer, toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport moment from \"moment\";\n\nlet getAge =\"\"\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst Vaccination = (props) => {\n    console.log(props)\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/VACCINATION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n        }\n        \n        \n        const calculate_age = dob => {\n            var today = new Date();\n            var dateParts = dob.split(\"-\");\n            var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]);\n            var birthDate = new Date(dateObject); // create a date object directlyfrom`dob1`argument\n            var age_now = today.getFullYear() - birthDate.getFullYear();\n            var m = today.getMonth() - birthDate.getMonth();\n                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n                        age_now--;\n                    }\n                if (age_now === 0) {\n                        return m + \" month(s)\";\n                    }\n                    return age_now;\n            };\n\n    getAge=calculate_age(moment(patientObj.dob).format(\"DD-MM-YYYY\"))\n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {\n        //console.log(values)\n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'VICCINATION'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          //objValues.visit_date= ''\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Vaccination Successful\");\n                  props.toggle()\n                  props.loadPatients()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n    console.log(getAge)\n\n  return (      \n      <div >\n         \n              <Modal isOpen={props.showModal} toggle={props.toggle} className={props.className} size=\"lg\">\n              <Form >\n             <ModalHeader toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>Vaccination </ModalHeader>\n                <ModalBody>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   {getAge>=5 ?\n                                   \n                                    (\n                                        <>\n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                   \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                         </>\n                                    )\n                                    :\n                                    (\n                                        <>\n                                            <p><h4>The Age is less than 5</h4></p>\n                                        </>\n                                    )\n\n                                    }\n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                              disabled={getAge<5?\"true\":\"\"}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </ModalBody>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Vaccination;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Transfer\\Transfer.js",["266","267","268","269","270","271"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst VitalSigns = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [transferStatus, setTransferStatus] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({patient_id: \"\",current_status:\"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/patientstatus/current-status-codeset`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setTransferStatus(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setObjValues ({...objValues,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        \n          objValues.patient_id= patientObj.id\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/patientstatus`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Transfer successful\");\n                  props.toggle()\n                  props.loadPatients()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Transfer - <b>{patientObj.first_name + \" \" + patientObj.last_name }</b>\n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                <FormGroup>\n                                    <Label >Transfer Status</Label>\n                                    <Input\n                                        type=\"select\"\n                                        name=\"current_status\"\n                                        id=\"current_status\"\n                                        value={objValues.current_status}\n                                        onChange={handleInputChange}\n                                        required\n                                        >\n                                        <option value=\"\"> Please Select</option>\n                                        \n                                            {transferStatus.map(({ name, id }) => (\n                                                <option key={id} value={id}>\n                                                {name}\n                                                </option>\n                                            ))}\n                                    </Input>\n                                    {/* {errors.gender !==\"\" ? (\n                                        <span className={classes.error}>{errors.gender}</span>\n                                    ) : \"\" } */}\n                                    </FormGroup>\n                                  </Row>\n                                    \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default VitalSigns;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Height.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\Bmi.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Patient\\PatientChart\\ViccinationStatus.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\layouts\\PageTitle.js",[],"C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Medication.js",["272","273","274","275"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"../../../api\";\nimport { token as token } from \"../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst Medication = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/MEDICATION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'MEDICATION'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Inclusion Criteria Successful\");\n                  props.toggle()\n                  props.getMedicationHistory()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                Medication \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Medication;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\SignsSymptons.js",["276","277","278","279"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst SignsSymptons = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/SIGNS_AND_SYMPTOMS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'SIGNS_AND_SYMPTOMS'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Inclusion Criteria Successful\");\n                  props.getSignsSymptomsHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                Signs and Symptoms \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default SignsSymptons;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\SupportiveCare.js",["280","281","282","283"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst SupportiveCare = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/REINFECTION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'REINFECTION'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Inclusion Criteria Successful\");\n                  props.getSupportiveCareHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                Supportive Care \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default SupportiveCare;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\ChronicMedication.js",["284","285","286","287"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst ChronicMedication = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/CHRONIC_MEDICATION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'CHRONIC_MEDICATION'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Inclusion Criteria Successful\");\n                  props.getChronicMedicationHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                Chronic Medication \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ChronicMedication;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\ReInfection.js",["288","289","290","291"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst ReInfection = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/REINFECTION`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'REINFECTION'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Record save successful\");\n                  props.toggle()\n                  props.getReinfectionHistory()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                Reinfection \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default ReInfection;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\VitalSign.js",["292","293","294","295"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst VitalSigns = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/ADMISSION_VITAL_SIGNS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'ADMISSION_VITAL_SIGNS'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Record save successful\");\n                  props.getVitalsHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Admission Vital Signs\n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default VitalSigns;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Comorbitie.js",["296","297","298","299"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst Commorbitie = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/COMORBIDITIES`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'COMORBIDITIES'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Record save successful\");\n                  props.getComobitieHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Co-Morbitie\n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Commorbitie;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Vaccination.js",["300","301","302","303"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst Viccination = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/VACCINATION_STATUS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'VACCINATION_STATUS'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Record Save Successful\");\n                  props.getVaccinationHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Vaccination Status\n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Viccination;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\Demograhic.js",["304","305","306","307"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst Demograhic = (props) => {\n\n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/DEMOGRAPHICS`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'DEMOGRAPHICS'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient Demographics Save Successful\");\n                  props.getDemographicHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Demograhics \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Demograhic;\n","C:\\Development\\lamisplus_new\\covid-module\\src\\jsx\\components\\Admission\\InclusionCriteria.js",["308","309","310","311"],"import React, {useState, useEffect} from 'react';\nimport { Form,Row, Card,CardBody, FormGroup, Label, Input} from 'reactstrap';\nimport MatButton from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CancelIcon from '@material-ui/icons/Cancel'\n// import { Alert } from 'reactstrap';\n// import { Spinner } from 'reactstrap';\nimport axios from \"axios\";\nimport { toast} from \"react-toastify\";\nimport { url as baseUrl } from \"./../../../api\";\nimport { token as token } from \"./../../../api\";\nimport { useHistory } from \"react-router-dom\";\nimport {  Modal, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        margin: theme.spacing(20),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3)\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2)\n    },\n    cardBottom: {\n        marginBottom: 20\n    },\n    Select: {\n        height: 45,\n        width: 350\n    },\n    button: {\n        margin: theme.spacing(1)\n    },\n\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    },\n    input: {\n        display: 'none'\n    } \n}))\n\nconst InclusionCriteria = (props) => {\n    \n    const patientObj = props.patientObj;\n    let history = useHistory();\n    const classes = useStyles()\n    const [vaccination, setVaccination] = useState([])\n    const [values, setValues] = useState([]);\n    const [objValues, setObjValues] = useState({category: \"\",patient_id: \"\",location: \"\",questionAnswers: \"\",visit_date: \"\"});\n    const [saving, setSaving] = useState(false);\n\n    useEffect(() => {\n        patients()\n      }, []);\n        ///GET LIST OF Patients\n        async function patients() {\n            axios\n                .get(`${baseUrl}covid/questions-by-category/INCLUSION_CRITERIA`,\n                { headers: {\"Authorization\" : `Bearer ${token}`} }\n                )\n                .then((response) => {\n                    \n                    setVaccination(response.data);\n                    //setValues(response.data)\n                })\n                .catch((error) => {    \n                });        \n        }\n        const handleInputChange = e => {\n            setValues ({...values,  [e.target.name]: e.target.value});\n          }\n          \n    /**** Submit Button Processing  */\n    const handleSubmit = (e) => {        \n        e.preventDefault();\n        const obj = (Object.entries(values).map(([key, value]) => ({\n            question_id: key,\n            answer: value,\n          })))\n          objValues.category= 'INCLUSION_CRITERIA'\n          objValues.patient_id= patientObj.id\n          objValues.questionAnswers =obj\n          objValues.visit_date= moment(new Date()).format(\"YYYY-MM-DD\")\n\n          setSaving(true);\n          axios.post(`${baseUrl}covid/encounters`,objValues,\n           { headers: {\"Authorization\" : `Bearer ${token}`}},\n          \n          )\n              .then(response => {\n                  setSaving(false);\n                  toast.success(\"Patient record save successful\");\n                  props.getInclusionHistory()\n                  props.toggle()\n                  //history.push(\"/\")\n\n              })\n              .catch(error => {\n                  setSaving(false);\n                  toast.error(\"Something went wrong\");\n              });\n          \n    }\n\n  return (      \n      <div >\n         \n              <Modal show={props.showModal} toggle={props.toggle} className=\"fade\" size=\"lg\">\n              <Form >\n             <Modal.Header toggle={props.toggle} style={{backgroundColor:\"#eeeeee\"}}>\n                 Inclusion Criteria \n                 <Button\n                    variant=\"\"\n                    className=\"btn-close\"\n                    onClick={props.toggle}\n                ></Button>\n            </Modal.Header>\n                <Modal.Body>\n                    \n                        <Card >\n                            <CardBody>\n                                <Row >\n                                   \n                                 \n                                        {vaccination.map((value) => (\n                                            <>\n                                                <div className=\"form-group mb-3 col-md-6\">\n                                                <FormGroup>\n                                                    <Label for=\"role\">{value.name}</Label>\n                                                    {value.datatype===\"date\"?\n                                                        (\n                                                            <Input\n                                                            type=\"date\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"number\"?\n                                                        (\n                                                            <Input\n                                                            type=\"number\"\n                                                            name={value.id}\n                                                            id={value.id}\n                                                            //value={value.name}\n                                                            onChange={handleInputChange}\n                                                            required\n                                                            >\n                                                            \n                                                        </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"select\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        {value.datatype===\"checkbox\"?\n                                                        (\n                                                            <Input\n                                                                type=\"select\"\n                                                                name={value.id}\n                                                                id={value.id}\n                                                                //value={values.name}\n                                                                onChange={handleInputChange}\n                                                                required\n                                                                >\n                                                                <option value=\"\"> </option>\n                                                                {value.responses.map(({ name, id }) => (\n                                                                    <option key={id} value={id}>\n                                                                    {name}\n                                                                    </option>\n                                                                ))}\n                                                            </Input>\n                                                        )\n                                                            :\n                                                            \" \"\n                                                        }\n                                                        \n                                                        \n                                                </FormGroup>\n                                            \n                                            </div>\n                                            </>\n                                        \n                                        ))}\n                                        \n                                             \n                                  </Row>\n                                      <br/>\n                                      \n                                      <br/>\n                                      \n                                          <MatButton\n                                              type='submit'\n                                              variant='contained'\n                                              color='primary'\n                                              className={classes.button}\n                                              startIcon={<SaveIcon />}\n                                              onClick={handleSubmit}\n                                             \n                                          >   \n                                              Save \n                                          </MatButton>\n                                           \n                                          <MatButton\n                                              variant='contained'\n                                              color='default'\n                                             onClick={props.toggle}\n                                              className={classes.button}\n                                              startIcon={<CancelIcon />}\n                                          >\n                                              cancel\n                                          </MatButton>\n                            </CardBody>\n                        </Card> \n                    </Modal.Body>\n        \n                </Form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default InclusionCriteria;\n",{"ruleId":"312","severity":1,"message":"313","line":4,"column":10,"nodeType":"314","messageId":"315","endLine":4,"endColumn":23},{"ruleId":"312","severity":1,"message":"316","line":3,"column":19,"nodeType":"314","messageId":"315","endLine":3,"endColumn":25},{"ruleId":"312","severity":1,"message":"317","line":2,"column":10,"nodeType":"314","messageId":"315","endLine":2,"endColumn":20},{"ruleId":"312","severity":1,"message":"318","line":9,"column":3,"nodeType":"314","messageId":"315","endLine":9,"endColumn":15},{"ruleId":"319","severity":1,"message":"320","line":25,"column":10,"nodeType":"321","messageId":"322","endLine":25,"endColumn":24,"fix":"323"},{"ruleId":"324","severity":1,"message":"325","line":58,"column":6,"nodeType":"326","endLine":58,"endColumn":41,"suggestions":"327"},{"ruleId":"312","severity":1,"message":"328","line":2,"column":27,"nodeType":"314","messageId":"315","endLine":2,"endColumn":36},{"ruleId":"312","severity":1,"message":"318","line":9,"column":3,"nodeType":"314","messageId":"315","endLine":9,"endColumn":15},{"ruleId":"319","severity":1,"message":"320","line":25,"column":10,"nodeType":"321","messageId":"322","endLine":25,"endColumn":24,"fix":"329"},{"ruleId":"312","severity":1,"message":"330","line":14,"column":8,"nodeType":"314","messageId":"315","endLine":14,"endColumn":33},{"ruleId":"319","severity":1,"message":"320","line":5,"column":10,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24,"fix":"331"},{"ruleId":"312","severity":1,"message":"332","line":27,"column":11,"nodeType":"314","messageId":"315","endLine":27,"endColumn":16},{"ruleId":"312","severity":1,"message":"333","line":68,"column":7,"nodeType":"314","messageId":"315","endLine":68,"endColumn":16},{"ruleId":"334","severity":1,"message":"335","line":172,"column":101,"nodeType":"336","messageId":"337","endLine":172,"endColumn":119,"fix":"338"},{"ruleId":"334","severity":1,"message":"335","line":174,"column":99,"nodeType":"336","messageId":"337","endLine":174,"endColumn":117,"fix":"339"},{"ruleId":"334","severity":1,"message":"335","line":176,"column":100,"nodeType":"336","messageId":"337","endLine":176,"endColumn":118,"fix":"340"},{"ruleId":"334","severity":1,"message":"335","line":178,"column":98,"nodeType":"336","messageId":"337","endLine":178,"endColumn":116,"fix":"341"},{"ruleId":"312","severity":1,"message":"342","line":14,"column":10,"nodeType":"314","messageId":"315","endLine":14,"endColumn":14},{"ruleId":"312","severity":1,"message":"343","line":14,"column":16,"nodeType":"314","messageId":"315","endLine":14,"endColumn":20},{"ruleId":"312","severity":1,"message":"344","line":14,"column":29,"nodeType":"314","messageId":"315","endLine":14,"endColumn":36},{"ruleId":"312","severity":1,"message":"345","line":14,"column":38,"nodeType":"314","messageId":"315","endLine":14,"endColumn":42},{"ruleId":"319","severity":1,"message":"320","line":10,"column":10,"nodeType":"321","messageId":"322","endLine":10,"endColumn":24,"fix":"346"},{"ruleId":"312","severity":1,"message":"347","line":11,"column":45,"nodeType":"314","messageId":"315","endLine":11,"endColumn":51},{"ruleId":"312","severity":1,"message":"348","line":11,"column":53,"nodeType":"314","messageId":"315","endLine":11,"endColumn":58},{"ruleId":"312","severity":1,"message":"349","line":62,"column":5,"nodeType":"314","messageId":"315","endLine":62,"endColumn":15},{"ruleId":"312","severity":1,"message":"350","line":68,"column":24,"nodeType":"314","messageId":"315","endLine":68,"endColumn":37},{"ruleId":"324","severity":1,"message":"351","line":141,"column":7,"nodeType":"326","endLine":141,"endColumn":9,"suggestions":"352"},{"ruleId":"319","severity":1,"message":"320","line":5,"column":10,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24,"fix":"353"},{"ruleId":"312","severity":1,"message":"332","line":27,"column":11,"nodeType":"314","messageId":"315","endLine":27,"endColumn":16},{"ruleId":"312","severity":1,"message":"333","line":67,"column":7,"nodeType":"314","messageId":"315","endLine":67,"endColumn":16},{"ruleId":"334","severity":1,"message":"335","line":164,"column":101,"nodeType":"336","messageId":"337","endLine":164,"endColumn":119,"fix":"354"},{"ruleId":"334","severity":1,"message":"335","line":166,"column":99,"nodeType":"336","messageId":"337","endLine":166,"endColumn":117,"fix":"355"},{"ruleId":"334","severity":1,"message":"335","line":168,"column":100,"nodeType":"336","messageId":"337","endLine":168,"endColumn":118,"fix":"356"},{"ruleId":"334","severity":1,"message":"335","line":170,"column":98,"nodeType":"336","messageId":"337","endLine":170,"endColumn":116,"fix":"357"},{"ruleId":"319","severity":1,"message":"320","line":5,"column":10,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24,"fix":"358"},{"ruleId":"312","severity":1,"message":"332","line":27,"column":11,"nodeType":"314","messageId":"315","endLine":27,"endColumn":16},{"ruleId":"312","severity":1,"message":"333","line":67,"column":7,"nodeType":"314","messageId":"315","endLine":67,"endColumn":16},{"ruleId":"334","severity":1,"message":"335","line":164,"column":101,"nodeType":"336","messageId":"337","endLine":164,"endColumn":119,"fix":"359"},{"ruleId":"334","severity":1,"message":"335","line":166,"column":99,"nodeType":"336","messageId":"337","endLine":166,"endColumn":117,"fix":"360"},{"ruleId":"334","severity":1,"message":"335","line":168,"column":100,"nodeType":"336","messageId":"337","endLine":168,"endColumn":118,"fix":"361"},{"ruleId":"334","severity":1,"message":"335","line":170,"column":98,"nodeType":"336","messageId":"337","endLine":170,"endColumn":116,"fix":"362"},{"ruleId":"319","severity":1,"message":"320","line":5,"column":10,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24,"fix":"363"},{"ruleId":"312","severity":1,"message":"332","line":27,"column":11,"nodeType":"314","messageId":"315","endLine":27,"endColumn":16},{"ruleId":"312","severity":1,"message":"333","line":67,"column":7,"nodeType":"314","messageId":"315","endLine":67,"endColumn":16},{"ruleId":"334","severity":1,"message":"335","line":164,"column":101,"nodeType":"336","messageId":"337","endLine":164,"endColumn":119,"fix":"364"},{"ruleId":"334","severity":1,"message":"335","line":166,"column":99,"nodeType":"336","messageId":"337","endLine":166,"endColumn":117,"fix":"365"},{"ruleId":"334","severity":1,"message":"335","line":168,"column":100,"nodeType":"336","messageId":"337","endLine":168,"endColumn":118,"fix":"366"},{"ruleId":"334","severity":1,"message":"335","line":170,"column":98,"nodeType":"336","messageId":"337","endLine":170,"endColumn":116,"fix":"367"},{"ruleId":"319","severity":1,"message":"320","line":5,"column":10,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24,"fix":"368"},{"ruleId":"312","severity":1,"message":"332","line":27,"column":11,"nodeType":"314","messageId":"315","endLine":27,"endColumn":16},{"ruleId":"312","severity":1,"message":"369","line":33,"column":9,"nodeType":"314","messageId":"315","endLine":33,"endColumn":18},{"ruleId":"312","severity":1,"message":"370","line":33,"column":20,"nodeType":"314","messageId":"315","endLine":33,"endColumn":30},{"ruleId":"312","severity":1,"message":"371","line":33,"column":41,"nodeType":"314","messageId":"315","endLine":33,"endColumn":48},{"ruleId":"312","severity":1,"message":"372","line":34,"column":10,"nodeType":"314","messageId":"315","endLine":34,"endColumn":21},{"ruleId":"312","severity":1,"message":"373","line":41,"column":8,"nodeType":"314","messageId":"315","endLine":41,"endColumn":14},{"ruleId":"312","severity":1,"message":"374","line":42,"column":8,"nodeType":"314","messageId":"315","endLine":42,"endColumn":16},{"ruleId":"312","severity":1,"message":"375","line":43,"column":8,"nodeType":"314","messageId":"315","endLine":43,"endColumn":21},{"ruleId":"312","severity":1,"message":"333","line":68,"column":7,"nodeType":"314","messageId":"315","endLine":68,"endColumn":16},{"ruleId":"312","severity":1,"message":"376","line":120,"column":11,"nodeType":"314","messageId":"315","endLine":120,"endColumn":25},{"ruleId":"312","severity":1,"message":"377","line":122,"column":11,"nodeType":"314","messageId":"315","endLine":122,"endColumn":23},{"ruleId":"312","severity":1,"message":"378","line":140,"column":11,"nodeType":"314","messageId":"315","endLine":140,"endColumn":24},{"ruleId":"334","severity":1,"message":"335","line":165,"column":101,"nodeType":"336","messageId":"337","endLine":165,"endColumn":119,"fix":"379"},{"ruleId":"334","severity":1,"message":"335","line":167,"column":99,"nodeType":"336","messageId":"337","endLine":167,"endColumn":117,"fix":"380"},{"ruleId":"334","severity":1,"message":"335","line":169,"column":100,"nodeType":"336","messageId":"337","endLine":169,"endColumn":118,"fix":"381"},{"ruleId":"334","severity":1,"message":"335","line":171,"column":98,"nodeType":"336","messageId":"337","endLine":171,"endColumn":116,"fix":"382"},{"ruleId":"312","severity":1,"message":"383","line":174,"column":11,"nodeType":"314","messageId":"315","endLine":174,"endColumn":28},{"ruleId":"312","severity":1,"message":"384","line":186,"column":11,"nodeType":"314","messageId":"315","endLine":186,"endColumn":24},{"ruleId":"319","severity":1,"message":"320","line":5,"column":10,"nodeType":"321","messageId":"322","endLine":5,"endColumn":24,"fix":"385"},{"ruleId":"312","severity":1,"message":"332","line":27,"column":11,"nodeType":"314","messageId":"315","endLine":27,"endColumn":16},{"ruleId":"312","severity":1,"message":"333","line":67,"column":7,"nodeType":"314","messageId":"315","endLine":67,"endColumn":16},{"ruleId":"334","severity":1,"message":"335","line":164,"column":101,"nodeType":"336","messageId":"337","endLine":164,"endColumn":119,"fix":"386"},{"ruleId":"334","severity":1,"message":"335","line":166,"column":99,"nodeType":"336","messageId":"337","endLine":166,"endColumn":117,"fix":"387"},{"ruleId":"334","severity":1,"message":"335","line":168,"column":100,"nodeType":"336","messageId":"337","endLine":168,"endColumn":118,"fix":"388"},{"ruleId":"334","severity":1,"message":"335","line":170,"column":98,"nodeType":"336","messageId":"337","endLine":170,"endColumn":116,"fix":"389"},{"ruleId":"312","severity":1,"message":"390","line":5,"column":8,"nodeType":"314","messageId":"315","endLine":5,"endColumn":17},{"ruleId":"312","severity":1,"message":"391","line":9,"column":8,"nodeType":"314","messageId":"315","endLine":9,"endColumn":25},{"ruleId":"312","severity":1,"message":"392","line":2,"column":35,"nodeType":"314","messageId":"315","endLine":2,"endColumn":44},{"ruleId":"312","severity":1,"message":"393","line":2,"column":46,"nodeType":"314","messageId":"315","endLine":2,"endColumn":51},{"ruleId":"312","severity":1,"message":"394","line":2,"column":53,"nodeType":"314","messageId":"315","endLine":2,"endColumn":58},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"395"},{"ruleId":"312","severity":1,"message":"373","line":15,"column":8,"nodeType":"314","messageId":"315","endLine":15,"endColumn":14},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"397","line":57,"column":12,"nodeType":"314","messageId":"315","endLine":57,"endColumn":26},{"ruleId":"312","severity":1,"message":"398","line":59,"column":12,"nodeType":"314","messageId":"315","endLine":59,"endColumn":18},{"ruleId":"312","severity":1,"message":"399","line":78,"column":15,"nodeType":"314","messageId":"315","endLine":78,"endColumn":32},{"ruleId":"312","severity":1,"message":"318","line":2,"column":45,"nodeType":"314","messageId":"315","endLine":2,"endColumn":57},{"ruleId":"312","severity":1,"message":"400","line":3,"column":5,"nodeType":"314","messageId":"315","endLine":3,"endColumn":8},{"ruleId":"312","severity":1,"message":"401","line":11,"column":10,"nodeType":"314","messageId":"315","endLine":11,"endColumn":24},{"ruleId":"319","severity":1,"message":"320","line":13,"column":10,"nodeType":"321","messageId":"322","endLine":13,"endColumn":24,"fix":"402"},{"ruleId":"312","severity":1,"message":"396","line":56,"column":9,"nodeType":"314","messageId":"315","endLine":56,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":60,"column":23,"nodeType":"314","messageId":"315","endLine":60,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":61,"column":12,"nodeType":"314","messageId":"315","endLine":61,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"404"},{"ruleId":"312","severity":1,"message":"373","line":15,"column":8,"nodeType":"314","messageId":"315","endLine":15,"endColumn":14},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"405","line":58,"column":12,"nodeType":"314","messageId":"315","endLine":58,"endColumn":18},{"ruleId":"312","severity":1,"message":"406","line":58,"column":20,"nodeType":"314","messageId":"315","endLine":58,"endColumn":29},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"407"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"408"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"409"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"410"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"411"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"412"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"413"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"414"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"415"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},{"ruleId":"319","severity":1,"message":"320","line":12,"column":10,"nodeType":"321","messageId":"322","endLine":12,"endColumn":24,"fix":"416"},{"ruleId":"312","severity":1,"message":"396","line":55,"column":9,"nodeType":"314","messageId":"315","endLine":55,"endColumn":16},{"ruleId":"312","severity":1,"message":"403","line":59,"column":23,"nodeType":"314","messageId":"315","endLine":59,"endColumn":35},{"ruleId":"312","severity":1,"message":"398","line":60,"column":12,"nodeType":"314","messageId":"315","endLine":60,"endColumn":18},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'makeStyles' is defined but never used.","'FormFeedback' is defined but never used.","no-useless-rename","Import token unnecessarily renamed.","ImportSpecifier","unnecessarilyRenamed",{"range":"417","text":"418"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'patientObj'. Either include it or remove the dependency array.","ArrayExpression",["419"],"'useEffect' is defined but never used.",{"range":"420","text":"418"},"'PatientVaccinationHistory' is defined but never used.",{"range":"421","text":"418"},"'toast' is defined but never used.","'useStyles' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property last_name.","MemberExpression","unexpectedWhitespace",{"range":"422","text":"423"},{"range":"424","text":"423"},{"range":"425","text":"423"},{"range":"426","text":"423"},"'Grid' is defined but never used.","'Step' is defined but never used.","'Segment' is defined but never used.","'Icon' is defined but never used.",{"range":"427","text":"418"},"'Button' is defined but never used.","'Image' is defined but never used.","'resultData' is assigned a value but never used.","'setpatientObj' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getChronicMedicationHistory', 'getComobitieHistory', 'getDemographicHistory', 'getInclusionHistory', 'getMedicationHistory', 'getReinfectionHistory', 'getSignsSymptomsHistory', 'getSupportiveCareHistory', 'getVaccinationHistory', and 'getVitalsHistory'. Either include them or remove the dependency array.",["428"],{"range":"429","text":"418"},{"range":"430","text":"423"},{"range":"431","text":"423"},{"range":"432","text":"423"},{"range":"433","text":"423"},{"range":"434","text":"418"},{"range":"435","text":"423"},{"range":"436","text":"423"},{"range":"437","text":"423"},{"range":"438","text":"423"},{"range":"439","text":"418"},{"range":"440","text":"423"},{"range":"441","text":"423"},{"range":"442","text":"423"},{"range":"443","text":"423"},{"range":"444","text":"418"},"'FaSyringe' is defined but never used.","'FaUserEdit' is defined but never used.","'FaTrash' is defined but never used.","'MdDashboard' is defined but never used.","'moment' is defined but never used.","'Transfer' is defined but never used.","'DeletePatient' is defined but never used.","'Transfertoggle' is assigned a value but never used.","'Deletetoggle' is assigned a value but never used.","'calculate_age' is assigned a value but never used.",{"range":"445","text":"423"},{"range":"446","text":"423"},{"range":"447","text":"423"},{"range":"448","text":"423"},"'VaccinationStatus' is assigned a value but never used.","'CurrentStatus' is assigned a value but never used.",{"range":"449","text":"418"},{"range":"450","text":"423"},{"range":"451","text":"423"},{"range":"452","text":"423"},{"range":"453","text":"423"},"'PageTitle' is defined but never used.","'ViccinationStatus' is defined but never used.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.",{"range":"454","text":"418"},"'history' is assigned a value but never used.","'transferStatus' is assigned a value but never used.","'saving' is assigned a value but never used.","'handleInputChange' is assigned a value but never used.","'Col' is defined but never used.","'ToastContainer' is defined but never used.",{"range":"455","text":"418"},"'setObjValues' is assigned a value but never used.",{"range":"456","text":"418"},"'values' is assigned a value but never used.","'setValues' is assigned a value but never used.",{"range":"457","text":"418"},{"range":"458","text":"418"},{"range":"459","text":"418"},{"range":"460","text":"418"},{"range":"461","text":"418"},{"range":"462","text":"418"},{"range":"463","text":"418"},{"range":"464","text":"418"},{"range":"465","text":"418"},{"range":"466","text":"418"},[896,910],"token",{"desc":"467","fix":"468"},[896,910],[180,194],[6549,6551],".",[6724,6726],[6900,6902],[7038,7040],[365,379],{"desc":"469","fix":"470"},[180,194],[6266,6268],[6441,6443],[6617,6619],[6755,6757],[180,194],[6271,6273],[6446,6448],[6622,6624],[6760,6762],[180,194],[6266,6268],[6441,6443],[6617,6619],[6755,6757],[180,194],[6301,6303],[6476,6478],[6652,6654],[6790,6792],[180,194],[6292,6294],[6467,6469],[6643,6645],[6781,6783],[533,547],[597,611],[533,547],[531,545],[533,547],[533,547],[533,547],[533,547],[533,547],[533,547],[533,547],[533,547],[533,547],"Update the dependencies array to be: [history.location.state.patientObj, patientObj]",{"range":"471","text":"472"},"Update the dependencies array to be: [getChronicMedicationHistory, getComobitieHistory, getDemographicHistory, getInclusionHistory, getMedicationHistory, getReinfectionHistory, getSignsSymptomsHistory, getSupportiveCareHistory, getVaccinationHistory, getVitalsHistory]",{"range":"473","text":"474"},[1888,1923],"[history.location.state.patientObj, patientObj]",[5553,5555],"[getChronicMedicationHistory, getComobitieHistory, getDemographicHistory, getInclusionHistory, getMedicationHistory, getReinfectionHistory, getSignsSymptomsHistory, getSupportiveCareHistory, getVaccinationHistory, getVitalsHistory]"]